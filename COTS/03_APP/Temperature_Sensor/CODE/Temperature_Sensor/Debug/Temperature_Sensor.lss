
Temperature_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fd2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000fd2  00001046  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015f7  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009fd  00000000  00000000  000027f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009b5  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00003bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008b3  00000000  00000000  00003d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e07  00000000  00000000  0000464f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00005456  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 44 03 	call	0x688	; 0x688 <main>
  7a:	0c 94 e7 07 	jmp	0xfce	; 0xfce <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_vidInit>:

// This Function Used to Initialize ADC
void ADC_vidInit(_enuADCChannelNum enuADCChannelNum)
{
		//1- Make Channel selected I/p
		CLR_BIT(DDRA,enuADCChannelNum);
  82:	9a b3       	in	r25, 0x1a	; 26
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	08 2e       	mov	r0, r24
  8a:	02 c0       	rjmp	.+4      	; 0x90 <ADC_vidInit+0xe>
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	0a 94       	dec	r0
  92:	e2 f7       	brpl	.-8      	; 0x8c <ADC_vidInit+0xa>
  94:	20 95       	com	r18
  96:	29 23       	and	r18, r25
  98:	2a bb       	out	0x1a, r18	; 26
		ADMUX &=0xE0;
  9a:	97 b1       	in	r25, 0x07	; 7
  9c:	90 7e       	andi	r25, 0xE0	; 224
  9e:	97 b9       	out	0x07, r25	; 7
		ADMUX |=enuADCChannelNum;
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	89 2b       	or	r24, r25
  a4:	87 b9       	out	0x07, r24	; 7
			ADCSRA |= 0x04;
		#elif ADC_PRESCALER == 5
			ADCSRA &= 0xF8;
			ADCSRA |= 0x05;
		#elif ADC_PRESCALER == 6
			ADCSRA &= 0xF8;
  a6:	86 b1       	in	r24, 0x06	; 6
  a8:	88 7f       	andi	r24, 0xF8	; 248
  aa:	86 b9       	out	0x06, r24	; 6
			ADCSRA |= 0x06;
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	86 60       	ori	r24, 0x06	; 6
  b0:	86 b9       	out	0x06, r24	; 6
			ADMUX &= 0x3F;
		#elif ADC_VOLT_REF == 1
			CLR_BIT(ADMUX, REFS1);
			SET_BIT(ADMUX, REFS0);
		#elif ADC_VOLT_REF == 3
			SET_BIT(ADMUX, REFS1);
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	87 b9       	out	0x07, r24	; 7
			SET_BIT(ADMUX, REFS0);
  b8:	87 b1       	in	r24, 0x07	; 7
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	87 b9       	out	0x07, r24	; 7
		#endif

		//4- Select Type of Storing of the output
		#if ADC_STORE_MODE == 0
			CLR_BIT(ADMUX, ADLAR);
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	87 b9       	out	0x07, r24	; 7
		#else
			SET_BIT(ADMUX, ADLAR);
		#endif

		//5- Turn on ADC
		SET_BIT(ADCSRA, ADEN);
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	86 b9       	out	0x06, r24	; 6
  ca:	08 95       	ret

000000cc <ADC_u16Read>:
u16 ADC_u16Read(void)
{
    u16 u16ReturnValue;
	
    // 1- Activate Start of Conversion 
     SET_BIT(ADCSRA,ADSC);
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	86 b9       	out	0x06, r24	; 6
		 
	 
    // 2- Wait until conversion Ended
    while (GET_BIT(ADCSRA,ADIF)==0);
  d2:	34 9b       	sbis	0x06, 4	; 6
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <ADC_u16Read+0x6>
    
    // 3- Clear Interrupt Flag after Ended 
    SET_BIT(ADCSRA,ADIF);
  d6:	86 b1       	in	r24, 0x06	; 6
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	86 b9       	out	0x06, r24	; 6
	
	
    // 4- Read ADCL then ADCH in order 
    u16ReturnValue  = ADCL;
  dc:	24 b1       	in	r18, 0x04	; 4
    u16ReturnValue |=(ADCH<<8);
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	98 2f       	mov	r25, r24
  e4:	88 27       	eor	r24, r24
	
    return u16ReturnValue;
  e6:	82 2b       	or	r24, r18
  e8:	08 95       	ret

000000ea <DIO_vidSetPinMode>:
        default:
                    break;
        
    }
    return enuOutPut;
}
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	19 f1       	breq	.+70     	; 0x134 <DIO_vidSetPinMode+0x4a>
  ee:	18 f4       	brcc	.+6      	; 0xf6 <DIO_vidSetPinMode+0xc>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	39 f0       	breq	.+14     	; 0x102 <DIO_vidSetPinMode+0x18>
  f4:	08 95       	ret
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	b1 f1       	breq	.+108    	; 0x166 <DIO_vidSetPinMode+0x7c>
  fa:	84 30       	cpi	r24, 0x04	; 4
  fc:	09 f4       	brne	.+2      	; 0x100 <DIO_vidSetPinMode+0x16>
  fe:	4c c0       	rjmp	.+152    	; 0x198 <DIO_vidSetPinMode+0xae>
 100:	08 95       	ret
 102:	41 30       	cpi	r20, 0x01	; 1
 104:	59 f4       	brne	.+22     	; 0x11c <DIO_vidSetPinMode+0x32>
 106:	2a b3       	in	r18, 0x1a	; 26
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_vidSetPinMode+0x28>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_vidSetPinMode+0x24>
 116:	82 2b       	or	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
 11a:	08 95       	ret
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_vidSetPinMode+0x3e>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_vidSetPinMode+0x3a>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	8a bb       	out	0x1a, r24	; 26
 132:	08 95       	ret
 134:	41 30       	cpi	r20, 0x01	; 1
 136:	59 f4       	brne	.+22     	; 0x14e <DIO_vidSetPinMode+0x64>
 138:	27 b3       	in	r18, 0x17	; 23
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_vidSetPinMode+0x5a>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_vidSetPinMode+0x56>
 148:	82 2b       	or	r24, r18
 14a:	87 bb       	out	0x17, r24	; 23
 14c:	08 95       	ret
 14e:	27 b3       	in	r18, 0x17	; 23
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_vidSetPinMode+0x70>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_vidSetPinMode+0x6c>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	87 bb       	out	0x17, r24	; 23
 164:	08 95       	ret
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	59 f4       	brne	.+22     	; 0x180 <DIO_vidSetPinMode+0x96>
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_vidSetPinMode+0x8c>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_vidSetPinMode+0x88>
 17a:	82 2b       	or	r24, r18
 17c:	84 bb       	out	0x14, r24	; 20
 17e:	08 95       	ret
 180:	24 b3       	in	r18, 0x14	; 20
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vidSetPinMode+0xa2>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vidSetPinMode+0x9e>
 190:	80 95       	com	r24
 192:	82 23       	and	r24, r18
 194:	84 bb       	out	0x14, r24	; 20
 196:	08 95       	ret
 198:	41 30       	cpi	r20, 0x01	; 1
 19a:	59 f4       	brne	.+22     	; 0x1b2 <DIO_vidSetPinMode+0xc8>
 19c:	21 b3       	in	r18, 0x11	; 17
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_vidSetPinMode+0xbe>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_vidSetPinMode+0xba>
 1ac:	82 2b       	or	r24, r18
 1ae:	81 bb       	out	0x11, r24	; 17
 1b0:	08 95       	ret
 1b2:	21 b3       	in	r18, 0x11	; 17
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_vidSetPinMode+0xd4>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_vidSetPinMode+0xd0>
 1c2:	80 95       	com	r24
 1c4:	82 23       	and	r24, r18
 1c6:	81 bb       	out	0x11, r24	; 17
 1c8:	08 95       	ret

000001ca <DIO_vidWritePin>:
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	19 f1       	breq	.+70     	; 0x214 <DIO_vidWritePin+0x4a>
 1ce:	18 f4       	brcc	.+6      	; 0x1d6 <DIO_vidWritePin+0xc>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	39 f0       	breq	.+14     	; 0x1e2 <DIO_vidWritePin+0x18>
 1d4:	08 95       	ret
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	b1 f1       	breq	.+108    	; 0x246 <DIO_vidWritePin+0x7c>
 1da:	84 30       	cpi	r24, 0x04	; 4
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <DIO_vidWritePin+0x16>
 1de:	4c c0       	rjmp	.+152    	; 0x278 <DIO_vidWritePin+0xae>
 1e0:	08 95       	ret
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	59 f4       	brne	.+22     	; 0x1fc <DIO_vidWritePin+0x32>
 1e6:	2b b3       	in	r18, 0x1b	; 27
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_vidWritePin+0x28>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_vidWritePin+0x24>
 1f6:	82 2b       	or	r24, r18
 1f8:	8b bb       	out	0x1b, r24	; 27
 1fa:	08 95       	ret
 1fc:	2b b3       	in	r18, 0x1b	; 27
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_vidWritePin+0x3e>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_vidWritePin+0x3a>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	8b bb       	out	0x1b, r24	; 27
 212:	08 95       	ret
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	59 f4       	brne	.+22     	; 0x22e <DIO_vidWritePin+0x64>
 218:	28 b3       	in	r18, 0x18	; 24
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_vidWritePin+0x5a>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_vidWritePin+0x56>
 228:	82 2b       	or	r24, r18
 22a:	88 bb       	out	0x18, r24	; 24
 22c:	08 95       	ret
 22e:	28 b3       	in	r18, 0x18	; 24
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vidWritePin+0x70>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vidWritePin+0x6c>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	88 bb       	out	0x18, r24	; 24
 244:	08 95       	ret
 246:	41 30       	cpi	r20, 0x01	; 1
 248:	59 f4       	brne	.+22     	; 0x260 <DIO_vidWritePin+0x96>
 24a:	25 b3       	in	r18, 0x15	; 21
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_vidWritePin+0x8c>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_vidWritePin+0x88>
 25a:	82 2b       	or	r24, r18
 25c:	85 bb       	out	0x15, r24	; 21
 25e:	08 95       	ret
 260:	25 b3       	in	r18, 0x15	; 21
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_vidWritePin+0xa2>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_vidWritePin+0x9e>
 270:	80 95       	com	r24
 272:	82 23       	and	r24, r18
 274:	85 bb       	out	0x15, r24	; 21
 276:	08 95       	ret
 278:	41 30       	cpi	r20, 0x01	; 1
 27a:	59 f4       	brne	.+22     	; 0x292 <DIO_vidWritePin+0xc8>
 27c:	22 b3       	in	r18, 0x12	; 18
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_vidWritePin+0xbe>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_vidWritePin+0xba>
 28c:	82 2b       	or	r24, r18
 28e:	82 bb       	out	0x12, r24	; 18
 290:	08 95       	ret
 292:	22 b3       	in	r18, 0x12	; 18
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_vidWritePin+0xd4>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_vidWritePin+0xd0>
 2a2:	80 95       	com	r24
 2a4:	82 23       	and	r24, r18
 2a6:	82 bb       	out	0x12, r24	; 18
 2a8:	08 95       	ret

000002aa <DIO_vidSetPortMode>:
*/


void DIO_vidSetPortMode(_enuGPIOx enuPortNum  , u8 u8Mode){

    switch (enuPortNum){
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	a1 f0       	breq	.+40     	; 0x2d6 <DIO_vidSetPortMode+0x2c>
 2ae:	18 f4       	brcc	.+6      	; 0x2b6 <DIO_vidSetPortMode+0xc>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	31 f0       	breq	.+12     	; 0x2c0 <DIO_vidSetPortMode+0x16>
 2b4:	08 95       	ret
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	c9 f0       	breq	.+50     	; 0x2ec <DIO_vidSetPortMode+0x42>
 2ba:	84 30       	cpi	r24, 0x04	; 4
 2bc:	11 f1       	breq	.+68     	; 0x302 <DIO_vidSetPortMode+0x58>
 2be:	08 95       	ret

        case GPIOA :    
                if(u8Mode == OUTPUT)
 2c0:	61 30       	cpi	r22, 0x01	; 1
 2c2:	19 f4       	brne	.+6      	; 0x2ca <DIO_vidSetPortMode+0x20>
                {
                    DDRA=0XFF; // set all pins as output
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	8a bb       	out	0x1a, r24	; 26
 2c8:	08 95       	ret
                }else if(u8Mode == INPUT){
 2ca:	61 11       	cpse	r22, r1
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_vidSetPortMode+0x28>
					DDRA = 0X00;// set all pins as input
 2ce:	1a ba       	out	0x1a, r1	; 26
 2d0:	08 95       	ret
                }else{
					DDRA = u8Mode; // pins mode depends on u8Mode
 2d2:	6a bb       	out	0x1a, r22	; 26
 2d4:	08 95       	ret
				}
                break;
        case GPIOB :    
                if(u8Mode == OUTPUT)
 2d6:	61 30       	cpi	r22, 0x01	; 1
 2d8:	19 f4       	brne	.+6      	; 0x2e0 <DIO_vidSetPortMode+0x36>
                {
                    DDRB=0XFF;
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	87 bb       	out	0x17, r24	; 23
 2de:	08 95       	ret
                }else if(u8Mode == INPUT){
 2e0:	61 11       	cpse	r22, r1
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_vidSetPortMode+0x3e>
					DDRB = 0X00;
 2e4:	17 ba       	out	0x17, r1	; 23
 2e6:	08 95       	ret
                }else{
					DDRB = u8Mode;
 2e8:	67 bb       	out	0x17, r22	; 23
 2ea:	08 95       	ret
                }
                break;

        case GPIOC :    
                if(u8Mode == OUTPUT)
 2ec:	61 30       	cpi	r22, 0x01	; 1
 2ee:	19 f4       	brne	.+6      	; 0x2f6 <DIO_vidSetPortMode+0x4c>
                {
                    DDRC=0XFF;
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	84 bb       	out	0x14, r24	; 20
 2f4:	08 95       	ret
                }else if(u8Mode == INPUT){
 2f6:	61 11       	cpse	r22, r1
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_vidSetPortMode+0x54>
					DDRC = 0X00;
 2fa:	14 ba       	out	0x14, r1	; 20
 2fc:	08 95       	ret
                }else{
					DDRC = u8Mode;
 2fe:	64 bb       	out	0x14, r22	; 20
 300:	08 95       	ret
                }
                break;
        case GPIOD :    
                if(u8Mode == OUTPUT)
 302:	61 30       	cpi	r22, 0x01	; 1
 304:	19 f4       	brne	.+6      	; 0x30c <DIO_vidSetPortMode+0x62>
                {
                    DDRD=0XFF;
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	81 bb       	out	0x11, r24	; 17
 30a:	08 95       	ret
                }else if(u8Mode == INPUT){
 30c:	61 11       	cpse	r22, r1
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_vidSetPortMode+0x6a>
					DDRD = 0X00;
 310:	11 ba       	out	0x11, r1	; 17
 312:	08 95       	ret
                }else{
					DDRD = u8Mode;
 314:	61 bb       	out	0x11, r22	; 17
 316:	08 95       	ret

00000318 <DIO_vidWritePort>:
*/


void DIO_vidWritePort(_enuGPIOx enuPortNum    , u8 u8OutPut){

  switch (enuPortNum){
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	a1 f0       	breq	.+40     	; 0x344 <DIO_vidWritePort+0x2c>
 31c:	18 f4       	brcc	.+6      	; 0x324 <DIO_vidWritePort+0xc>
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	31 f0       	breq	.+12     	; 0x32e <DIO_vidWritePort+0x16>
 322:	08 95       	ret
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	c9 f0       	breq	.+50     	; 0x35a <DIO_vidWritePort+0x42>
 328:	84 30       	cpi	r24, 0x04	; 4
 32a:	11 f1       	breq	.+68     	; 0x370 <DIO_vidWritePort+0x58>
 32c:	08 95       	ret

        case GPIOA :    
                if(u8OutPut == HIGH)
 32e:	61 30       	cpi	r22, 0x01	; 1
 330:	19 f4       	brne	.+6      	; 0x338 <DIO_vidWritePort+0x20>
                {
                    PORTA =0XFF; // write HIGH on all pins of the port
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	8b bb       	out	0x1b, r24	; 27
 336:	08 95       	ret
                }else if(u8OutPut == LOW){
 338:	61 11       	cpse	r22, r1
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_vidWritePort+0x28>
                    PORTA =0X00;// write LOW on all pins of the port
 33c:	1b ba       	out	0x1b, r1	; 27
 33e:	08 95       	ret
                }else{
                    PORTA=u8OutPut; // all pins values of the port depends on the u8Output
 340:	6b bb       	out	0x1b, r22	; 27
 342:	08 95       	ret
                }
                break;
        case GPIOB :    
                if(u8OutPut == HIGH)
 344:	61 30       	cpi	r22, 0x01	; 1
 346:	19 f4       	brne	.+6      	; 0x34e <DIO_vidWritePort+0x36>
                {
                    PORTB =0XFF;
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	88 bb       	out	0x18, r24	; 24
 34c:	08 95       	ret
                }else if(u8OutPut == LOW){
 34e:	61 11       	cpse	r22, r1
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_vidWritePort+0x3e>
                    PORTB =0X00;
 352:	18 ba       	out	0x18, r1	; 24
 354:	08 95       	ret
                }else{
                    PORTB=u8OutPut;
 356:	68 bb       	out	0x18, r22	; 24
 358:	08 95       	ret
                }
                break;

        case GPIOC :    
                if(u8OutPut == HIGH)
 35a:	61 30       	cpi	r22, 0x01	; 1
 35c:	19 f4       	brne	.+6      	; 0x364 <DIO_vidWritePort+0x4c>
                {
                    PORTC =0XFF;
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	85 bb       	out	0x15, r24	; 21
 362:	08 95       	ret
                }else if(u8OutPut == LOW){
 364:	61 11       	cpse	r22, r1
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_vidWritePort+0x54>
                    PORTC =0X00;
 368:	15 ba       	out	0x15, r1	; 21
 36a:	08 95       	ret
                }else{
                    PORTC=u8OutPut;
 36c:	65 bb       	out	0x15, r22	; 21
 36e:	08 95       	ret
                }
                break;
        case GPIOD :    
                if(u8OutPut == HIGH)
 370:	61 30       	cpi	r22, 0x01	; 1
 372:	19 f4       	brne	.+6      	; 0x37a <DIO_vidWritePort+0x62>
                {
                    PORTD =0XFF;
 374:	8f ef       	ldi	r24, 0xFF	; 255
 376:	82 bb       	out	0x12, r24	; 18
 378:	08 95       	ret
                }else if(u8OutPut == LOW){
 37a:	61 11       	cpse	r22, r1
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_vidWritePort+0x6a>
                    PORTD =0X00;
 37e:	12 ba       	out	0x12, r1	; 18
 380:	08 95       	ret
                }else{
                    PORTD=u8OutPut;
 382:	62 bb       	out	0x12, r22	; 18
 384:	08 95       	ret

00000386 <DIO_vidSetNibbleMode>:

*/


void DIO_vidSetNibbleMode(_enuGPIOx enuPortNum,_enuNippleType enuNibbleType, u8 u8Mode){
	switch (enuPortNum){
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	c9 f0       	breq	.+50     	; 0x3bc <DIO_vidSetNibbleMode+0x36>
 38a:	18 f4       	brcc	.+6      	; 0x392 <DIO_vidSetNibbleMode+0xc>
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	31 f0       	breq	.+12     	; 0x39c <DIO_vidSetNibbleMode+0x16>
 390:	08 95       	ret
 392:	83 30       	cpi	r24, 0x03	; 3
 394:	19 f1       	breq	.+70     	; 0x3dc <DIO_vidSetNibbleMode+0x56>
 396:	84 30       	cpi	r24, 0x04	; 4
 398:	89 f1       	breq	.+98     	; 0x3fc <DIO_vidSetNibbleMode+0x76>
 39a:	08 95       	ret
		case GPIOA :
            if(enuNibbleType==HIGHNIBBLE){ // if we want to write in high nibble
 39c:	61 30       	cpi	r22, 0x01	; 1
 39e:	39 f4       	brne	.+14     	; 0x3ae <DIO_vidSetNibbleMode+0x28>
                // (u8Mode & 0X0F)  to get the high nibble of the u8Mode
                // (DDRA & 0XF0)    to get the Low nibble of the Register
                //  to keep low nibble values we use OR operator between them
                DIO_vidSetPortMode(enuPortNum  , ( (u8Mode & 0XF0) | (DDRA & 0X0F) ) ); 
 3a0:	6a b3       	in	r22, 0x1a	; 26
 3a2:	40 7f       	andi	r20, 0xF0	; 240
 3a4:	6f 70       	andi	r22, 0x0F	; 15
 3a6:	64 2b       	or	r22, r20
 3a8:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_vidSetPortMode>
 3ac:	08 95       	ret

            }else{  // if we want to write in low nibble
                // (u8Mode & 0X0F)  to get the low nibble of the u8Mode
                // (DDRA & 0XF0)    to get the High nibble of the Register
                //  to keep High nibble values we use OR operator between them
                DIO_vidSetPortMode(enuPortNum  , ( (u8Mode & 0X0F) | (DDRA & 0XF0) ) );
 3ae:	6a b3       	in	r22, 0x1a	; 26
 3b0:	4f 70       	andi	r20, 0x0F	; 15
 3b2:	60 7f       	andi	r22, 0xF0	; 240
 3b4:	64 2b       	or	r22, r20
 3b6:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_vidSetPortMode>
 3ba:	08 95       	ret
            }
			break;
		case GPIOB :
			if(enuNibbleType==HIGHNIBBLE){
 3bc:	61 30       	cpi	r22, 0x01	; 1
 3be:	39 f4       	brne	.+14     	; 0x3ce <DIO_vidSetNibbleMode+0x48>
                DIO_vidSetPortMode(enuPortNum  , ( (u8Mode & 0XF0) | (DDRB & 0X0F) ) );
 3c0:	67 b3       	in	r22, 0x17	; 23
 3c2:	40 7f       	andi	r20, 0xF0	; 240
 3c4:	6f 70       	andi	r22, 0x0F	; 15
 3c6:	64 2b       	or	r22, r20
 3c8:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_vidSetPortMode>
 3cc:	08 95       	ret

            }else{
                DIO_vidSetPortMode(enuPortNum  , ( (u8Mode & 0X0F) | (DDRB & 0XF0) ) );
 3ce:	67 b3       	in	r22, 0x17	; 23
 3d0:	4f 70       	andi	r20, 0x0F	; 15
 3d2:	60 7f       	andi	r22, 0xF0	; 240
 3d4:	64 2b       	or	r22, r20
 3d6:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_vidSetPortMode>
 3da:	08 95       	ret
            }
			break;
		case GPIOC :
			if(enuNibbleType==HIGHNIBBLE){
 3dc:	61 30       	cpi	r22, 0x01	; 1
 3de:	39 f4       	brne	.+14     	; 0x3ee <DIO_vidSetNibbleMode+0x68>
                DIO_vidSetPortMode(enuPortNum  , ( (u8Mode & 0XF0) | (DDRC & 0X0F) ) );
 3e0:	64 b3       	in	r22, 0x14	; 20
 3e2:	40 7f       	andi	r20, 0xF0	; 240
 3e4:	6f 70       	andi	r22, 0x0F	; 15
 3e6:	64 2b       	or	r22, r20
 3e8:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_vidSetPortMode>
 3ec:	08 95       	ret

            }else{
                DIO_vidSetPortMode(enuPortNum  , ( (u8Mode & 0X0F) | (DDRC & 0XF0) ) );
 3ee:	64 b3       	in	r22, 0x14	; 20
 3f0:	4f 70       	andi	r20, 0x0F	; 15
 3f2:	60 7f       	andi	r22, 0xF0	; 240
 3f4:	64 2b       	or	r22, r20
 3f6:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_vidSetPortMode>
 3fa:	08 95       	ret
            }
			break;
		case GPIOD :
			if(enuNibbleType==HIGHNIBBLE){
 3fc:	61 30       	cpi	r22, 0x01	; 1
 3fe:	39 f4       	brne	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
                DIO_vidSetPortMode(enuPortNum  , ( (u8Mode & 0XF0) | (DDRD & 0X0F) ) );
 400:	61 b3       	in	r22, 0x11	; 17
 402:	40 7f       	andi	r20, 0xF0	; 240
 404:	6f 70       	andi	r22, 0x0F	; 15
 406:	64 2b       	or	r22, r20
 408:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_vidSetPortMode>
 40c:	08 95       	ret

            }else{
                DIO_vidSetPortMode(enuPortNum  , ( (u8Mode & 0X0F) | (DDRD & 0XF0) ) );
 40e:	61 b3       	in	r22, 0x11	; 17
 410:	4f 70       	andi	r20, 0x0F	; 15
 412:	60 7f       	andi	r22, 0xF0	; 240
 414:	64 2b       	or	r22, r20
 416:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_vidSetPortMode>
 41a:	08 95       	ret

0000041c <DIO_vidWriteNibble>:
*/


void DIO_vidWriteNibble(_enuGPIOx enuPortNum,_enuNippleType enuNibbleType, u8 u8OutPut)
{
	switch (enuPortNum){
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	c9 f0       	breq	.+50     	; 0x452 <DIO_vidWriteNibble+0x36>
 420:	18 f4       	brcc	.+6      	; 0x428 <DIO_vidWriteNibble+0xc>
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	31 f0       	breq	.+12     	; 0x432 <DIO_vidWriteNibble+0x16>
 426:	08 95       	ret
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	19 f1       	breq	.+70     	; 0x472 <DIO_vidWriteNibble+0x56>
 42c:	84 30       	cpi	r24, 0x04	; 4
 42e:	89 f1       	breq	.+98     	; 0x492 <DIO_vidWriteNibble+0x76>
 430:	08 95       	ret
		case GPIOA :
            if(enuNibbleType==HIGHNIBBLE){  
 432:	61 30       	cpi	r22, 0x01	; 1
 434:	39 f4       	brne	.+14     	; 0x444 <DIO_vidWriteNibble+0x28>
                // if we want to write in HIGH nibble
                // (u8Mode & 0XF0)  to get the HIGH nibble of the u8Mode
                // (PORTA & 0X0F)    to get the LOW nibble of the Register
                //  to keep LOW nibble values we use OR operator between them
                DIO_vidWritePort(enuPortNum		, ( (u8OutPut & 0XF0) | (PORTA & 0X0F) ) );
 436:	6b b3       	in	r22, 0x1b	; 27
 438:	40 7f       	andi	r20, 0xF0	; 240
 43a:	6f 70       	andi	r22, 0x0F	; 15
 43c:	64 2b       	or	r22, r20
 43e:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_vidWritePort>
 442:	08 95       	ret
            }else{  
                // if we want to write in low nibble
                // (u8Mode & 0X0F)  to get the low nibble of the u8Mode
                // (PORTA & 0XF0)    to get the High nibble of the Register
                //  to keep High nibble values we use OR operator between them
                DIO_vidWritePort(enuPortNum		, ( (u8OutPut & 0X0F) | (PORTA & 0XF0) ) );
 444:	6b b3       	in	r22, 0x1b	; 27
 446:	4f 70       	andi	r20, 0x0F	; 15
 448:	60 7f       	andi	r22, 0xF0	; 240
 44a:	64 2b       	or	r22, r20
 44c:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_vidWritePort>
 450:	08 95       	ret
            }
            break;
		case GPIOB :
            if(enuNibbleType==HIGHNIBBLE){
 452:	61 30       	cpi	r22, 0x01	; 1
 454:	39 f4       	brne	.+14     	; 0x464 <DIO_vidWriteNibble+0x48>
                DIO_vidWritePort(enuPortNum		, ( (u8OutPut & 0XF0) | (PORTB & 0X0F) ) );
 456:	68 b3       	in	r22, 0x18	; 24
 458:	40 7f       	andi	r20, 0xF0	; 240
 45a:	6f 70       	andi	r22, 0x0F	; 15
 45c:	64 2b       	or	r22, r20
 45e:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_vidWritePort>
 462:	08 95       	ret
            }else{
                DIO_vidWritePort(enuPortNum		, ( (u8OutPut & 0X0F) | (PORTB & 0XF0) ) );
 464:	68 b3       	in	r22, 0x18	; 24
 466:	4f 70       	andi	r20, 0x0F	; 15
 468:	60 7f       	andi	r22, 0xF0	; 240
 46a:	64 2b       	or	r22, r20
 46c:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_vidWritePort>
 470:	08 95       	ret
            }
            break;
        case GPIOC :
            if(enuNibbleType==HIGHNIBBLE){
 472:	61 30       	cpi	r22, 0x01	; 1
 474:	39 f4       	brne	.+14     	; 0x484 <DIO_vidWriteNibble+0x68>
                DIO_vidWritePort(enuPortNum		, ( (u8OutPut & 0XF0) | (PORTC & 0X0F) ) );
 476:	65 b3       	in	r22, 0x15	; 21
 478:	40 7f       	andi	r20, 0xF0	; 240
 47a:	6f 70       	andi	r22, 0x0F	; 15
 47c:	64 2b       	or	r22, r20
 47e:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_vidWritePort>
 482:	08 95       	ret
            }else{
                DIO_vidWritePort(enuPortNum		, ( (u8OutPut & 0X0F) | (PORTC & 0XF0) ) );
 484:	65 b3       	in	r22, 0x15	; 21
 486:	4f 70       	andi	r20, 0x0F	; 15
 488:	60 7f       	andi	r22, 0xF0	; 240
 48a:	64 2b       	or	r22, r20
 48c:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_vidWritePort>
 490:	08 95       	ret
            }
            break;
        case GPIOD :
            if(enuNibbleType==HIGHNIBBLE){
 492:	61 30       	cpi	r22, 0x01	; 1
 494:	39 f4       	brne	.+14     	; 0x4a4 <DIO_vidWriteNibble+0x88>
                DIO_vidWritePort(enuPortNum		, ( (u8OutPut & 0XF0) | (PORTD & 0X0F) ) );
 496:	62 b3       	in	r22, 0x12	; 18
 498:	40 7f       	andi	r20, 0xF0	; 240
 49a:	6f 70       	andi	r22, 0x0F	; 15
 49c:	64 2b       	or	r22, r20
 49e:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_vidWritePort>
 4a2:	08 95       	ret
            }else{
                DIO_vidWritePort(enuPortNum		, ( (u8OutPut & 0X0F) | (PORTD & 0XF0) ) );
 4a4:	62 b3       	in	r22, 0x12	; 18
 4a6:	4f 70       	andi	r20, 0x0F	; 15
 4a8:	60 7f       	andi	r22, 0xF0	; 240
 4aa:	64 2b       	or	r22, r20
 4ac:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_vidWritePort>
 4b0:	08 95       	ret

000004b2 <LCD_vidSendEnPulse>:

Return Value : NULL
*/
static void LCD_vidSendEnPulse()
{
    DIO_vidWritePin(LCD_EN_PORT,LCD_EN_PIN,HIGH);
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	66 e0       	ldi	r22, 0x06	; 6
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_vidWritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4bc:	8f e3       	ldi	r24, 0x3F	; 63
 4be:	9c e9       	ldi	r25, 0x9C	; 156
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <LCD_vidSendEnPulse+0xe>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <LCD_vidSendEnPulse+0x14>
 4c6:	00 00       	nop
    _delay_ms(10);
    DIO_vidWritePin(LCD_EN_PORT,LCD_EN_PIN,LOW);
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	66 e0       	ldi	r22, 0x06	; 6
 4cc:	84 e0       	ldi	r24, 0x04	; 4
 4ce:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_vidWritePin>
 4d2:	08 95       	ret

000004d4 <LCD_vidSendCmd>:

Return Value : NULL
*/

void LCD_vidSendCmd(_enuLcdCmd enuCmd)
{
 4d4:	cf 93       	push	r28
 4d6:	c8 2f       	mov	r28, r24
    DIO_vidWritePin(LCD_RS_PORT,LCD_RS_PIN,LOW);
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	65 e0       	ldi	r22, 0x05	; 5
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_vidWritePin>
    #if LCD_MODE    == 1
    DIO_vidWritePort(LCD_DATA_PORT,enuCmd);
    #elif LCD_MODE  ==  0
    DIO_vidWriteNibble(LCD_DATA_PORT,LCD_NIBBLE_MODE,(LCD_NIBBLE_MODE==HIGHNIBBLE)?enuCmd:enuCmd>>4);
 4e2:	4c 2f       	mov	r20, r28
 4e4:	42 95       	swap	r20
 4e6:	4f 70       	andi	r20, 0x0F	; 15
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	84 e0       	ldi	r24, 0x04	; 4
 4ec:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_vidWriteNibble>
	LCD_vidSendEnPulse();
 4f0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_vidSendEnPulse>
    DIO_vidWriteNibble(LCD_DATA_PORT,LCD_NIBBLE_MODE,(LCD_NIBBLE_MODE==HIGHNIBBLE)?enuCmd<<4:enuCmd);
 4f4:	4c 2f       	mov	r20, r28
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	84 e0       	ldi	r24, 0x04	; 4
 4fa:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_vidWriteNibble>
    #endif
    LCD_vidSendEnPulse(LCD_EN_PORT,LCD_EN_PIN);
 4fe:	66 e0       	ldi	r22, 0x06	; 6
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	84 e0       	ldi	r24, 0x04	; 4
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_vidSendEnPulse>
}
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <LCD_vidInit>:
 50e:	2f ef       	ldi	r18, 0xFF	; 255
 510:	83 ec       	ldi	r24, 0xC3	; 195
 512:	99 e0       	ldi	r25, 0x09	; 9
 514:	21 50       	subi	r18, 0x01	; 1
 516:	80 40       	sbci	r24, 0x00	; 0
 518:	90 40       	sbci	r25, 0x00	; 0
 51a:	e1 f7       	brne	.-8      	; 0x514 <LCD_vidInit+0x6>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <LCD_vidInit+0x10>
 51e:	00 00       	nop
    DIO_vidSetPinMode(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
	 LCD_vidSendCmd(LCD_RETURN_HOME);
	 _delay_ms(50);
	 LCD_vidSendCmd(LCD_FUNCTION_8BIT_2LINES);
    #elif LCD_MODE  ==  0
    DIO_vidSetNibbleMode(LCD_DATA_PORT,LCD_NIBBLE_MODE,OUTPUT);
 520:	41 e0       	ldi	r20, 0x01	; 1
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	84 e0       	ldi	r24, 0x04	; 4
 526:	0e 94 c3 01 	call	0x386	; 0x386 <DIO_vidSetNibbleMode>
    DIO_vidSetPinMode(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	65 e0       	ldi	r22, 0x05	; 5
 52e:	84 e0       	ldi	r24, 0x04	; 4
 530:	0e 94 75 00 	call	0xea	; 0xea <DIO_vidSetPinMode>
    DIO_vidSetPinMode(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	62 e0       	ldi	r22, 0x02	; 2
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	0e 94 75 00 	call	0xea	; 0xea <DIO_vidSetPinMode>
    DIO_vidSetPinMode(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	66 e0       	ldi	r22, 0x06	; 6
 542:	84 e0       	ldi	r24, 0x04	; 4
 544:	0e 94 75 00 	call	0xea	; 0xea <DIO_vidSetPinMode>
	 LCD_vidSendCmd(LCD_RETURN_HOME);
 548:	82 e0       	ldi	r24, 0x02	; 2
 54a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_vidSendCmd>
 54e:	2f ef       	ldi	r18, 0xFF	; 255
 550:	80 e7       	ldi	r24, 0x70	; 112
 552:	92 e0       	ldi	r25, 0x02	; 2
 554:	21 50       	subi	r18, 0x01	; 1
 556:	80 40       	sbci	r24, 0x00	; 0
 558:	90 40       	sbci	r25, 0x00	; 0
 55a:	e1 f7       	brne	.-8      	; 0x554 <LCD_vidInit+0x46>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <LCD_vidInit+0x50>
 55e:	00 00       	nop
	 _delay_ms(50);
	 LCD_vidSendCmd(LCD_FUNCTION_4BIT_2LINES);
 560:	88 e2       	ldi	r24, 0x28	; 40
 562:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_vidSendCmd>
 566:	8f e3       	ldi	r24, 0x3F	; 63
 568:	9f e1       	ldi	r25, 0x1F	; 31
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <LCD_vidInit+0x5c>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <LCD_vidInit+0x62>
 570:	00 00       	nop
    #endif
    // Delay 50 ms To Send The Commands To LCD
    _delay_ms(2);
    LCD_vidSendCmd(LCD_DISP_ON_CURSOR_ON);
 572:	8e e0       	ldi	r24, 0x0E	; 14
 574:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_vidSendCmd>
 578:	8f e3       	ldi	r24, 0x3F	; 63
 57a:	9f e1       	ldi	r25, 0x1F	; 31
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <LCD_vidInit+0x6e>
 580:	00 c0       	rjmp	.+0      	; 0x582 <LCD_vidInit+0x74>
 582:	00 00       	nop
    _delay_ms(2);
    LCD_vidSendCmd(LCD_CLEAR_SCREEN);
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_vidSendCmd>
 58a:	8f e3       	ldi	r24, 0x3F	; 63
 58c:	9f e1       	ldi	r25, 0x1F	; 31
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <LCD_vidInit+0x80>
 592:	00 c0       	rjmp	.+0      	; 0x594 <LCD_vidInit+0x86>
 594:	00 00       	nop
    _delay_ms(2);
	LCD_vidSendCmd(LCD_SHIFT_CURSOR_POS_LEFT);
 596:	80 e1       	ldi	r24, 0x10	; 16
 598:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_vidSendCmd>
 59c:	8f e3       	ldi	r24, 0x3F	; 63
 59e:	9f e1       	ldi	r25, 0x1F	; 31
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <LCD_vidInit+0x92>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <LCD_vidInit+0x98>
 5a6:	00 00       	nop
 5a8:	08 95       	ret

000005aa <LCD_vidSendChar>:

Return Value : NULL
*/

void LCD_vidSendChar(u8 u8Char)
{
 5aa:	cf 93       	push	r28
 5ac:	c8 2f       	mov	r28, r24
	DIO_vidWritePin(LCD_RS_PORT,LCD_RS_PIN,HIGH);
 5ae:	41 e0       	ldi	r20, 0x01	; 1
 5b0:	65 e0       	ldi	r22, 0x05	; 5
 5b2:	84 e0       	ldi	r24, 0x04	; 4
 5b4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_vidWritePin>
	#if LCD_MODE    == 1
	DIO_vidWritePort(LCD_DATA_PORT,u8Char);
	#elif LCD_MODE  ==  0
    DIO_vidWriteNibble(LCD_DATA_PORT,LCD_NIBBLE_MODE,(LCD_NIBBLE_MODE==HIGHNIBBLE)?u8Char:u8Char>>4);
 5b8:	4c 2f       	mov	r20, r28
 5ba:	42 95       	swap	r20
 5bc:	4f 70       	andi	r20, 0x0F	; 15
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	84 e0       	ldi	r24, 0x04	; 4
 5c2:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_vidWriteNibble>
    LCD_vidSendEnPulse();
 5c6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_vidSendEnPulse>
    DIO_vidWriteNibble(LCD_DATA_PORT,LCD_NIBBLE_MODE,(LCD_NIBBLE_MODE==HIGHNIBBLE)?u8Char<<4:u8Char);
 5ca:	4c 2f       	mov	r20, r28
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	84 e0       	ldi	r24, 0x04	; 4
 5d0:	0e 94 0e 02 	call	0x41c	; 0x41c <DIO_vidWriteNibble>
	#endif
	LCD_vidSendEnPulse(LCD_EN_PORT,LCD_EN_PIN);
 5d4:	66 e0       	ldi	r22, 0x06	; 6
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	84 e0       	ldi	r24, 0x04	; 4
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD_vidSendEnPulse>
}
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <LCD_vidSendString>:

Return Value : NULL
*/

void LCD_vidSendString(u8* u8String)
{
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	ec 01       	movw	r28, r24
	while((*u8String)!= '\0')
 5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <LCD_vidSendString+0xe>
	{
		LCD_vidSendChar(*u8String);
 5ec:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_vidSendChar>
		u8String++;
 5f0:	21 96       	adiw	r28, 0x01	; 1
Return Value : NULL
*/

void LCD_vidSendString(u8* u8String)
{
	while((*u8String)!= '\0')
 5f2:	88 81       	ld	r24, Y
 5f4:	81 11       	cpse	r24, r1
 5f6:	fa cf       	rjmp	.-12     	; 0x5ec <LCD_vidSendString+0x8>
	{
		LCD_vidSendChar(*u8String);
		u8String++;
	}
}
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	08 95       	ret

000005fe <LCD_vidSendNumber>:
Return type : void

Return Value : NULL
*/

void LCD_vidSendNumber(u32 u32Num){
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	cd b7       	in	r28, 0x3d	; 61
 608:	de b7       	in	r29, 0x3e	; 62
 60a:	64 97       	sbiw	r28, 0x14	; 20
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	f8 94       	cli
 610:	de bf       	out	0x3e, r29	; 62
 612:	0f be       	out	0x3f, r0	; 63
 614:	cd bf       	out	0x3d, r28	; 61
	u8 str[20];
	sprintf(str,"%d",u32Num);
 616:	9f 93       	push	r25
 618:	8f 93       	push	r24
 61a:	7f 93       	push	r23
 61c:	6f 93       	push	r22
 61e:	80 e6       	ldi	r24, 0x60	; 96
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	9f 93       	push	r25
 624:	8f 93       	push	r24
 626:	8e 01       	movw	r16, r28
 628:	0f 5f       	subi	r16, 0xFF	; 255
 62a:	1f 4f       	sbci	r17, 0xFF	; 255
 62c:	1f 93       	push	r17
 62e:	0f 93       	push	r16
 630:	0e 94 fd 04 	call	0x9fa	; 0x9fa <sprintf>
	LCD_vidSendString(str);
 634:	c8 01       	movw	r24, r16
 636:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_vidSendString>
}
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	f8 94       	cli
 63e:	de bf       	out	0x3e, r29	; 62
 640:	0f be       	out	0x3f, r0	; 63
 642:	cd bf       	out	0x3d, r28	; 61
 644:	64 96       	adiw	r28, 0x14	; 20
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	f8 94       	cli
 64a:	de bf       	out	0x3e, r29	; 62
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	cd bf       	out	0x3d, r28	; 61
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	1f 91       	pop	r17
 656:	0f 91       	pop	r16
 658:	08 95       	ret

0000065a <LM35_u8LM35Read>:
u8 LM35_u8LM35Read(void)
{

    u16 temp;
	u8 value;
    temp = ADC_u16Read();
 65a:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_u16Read>
 	value = (temp*(float)ADC_Vref)/10240;
 65e:	bc 01       	movw	r22, r24
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	0e 94 02 04 	call	0x804	; 0x804 <__floatunsisf>
 668:	20 e0       	ldi	r18, 0x00	; 0
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	40 e2       	ldi	r20, 0x20	; 32
 66e:	55 e4       	ldi	r21, 0x45	; 69
 670:	0e 94 90 04 	call	0x920	; 0x920 <__mulsf3>
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	40 e2       	ldi	r20, 0x20	; 32
 67a:	56 e4       	ldi	r21, 0x46	; 70
 67c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__divsf3>
 680:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fixunssfsi>
 684:	86 2f       	mov	r24, r22
    return value;
    
 686:	08 95       	ret

00000688 <main>:
#define F_CPU 8000000
#include "util/delay.h"

int main(void)
{
	LCD_vidInit();
 688:	0e 94 87 02 	call	0x50e	; 0x50e <LCD_vidInit>
	ADC_vidInit(ADC_CHANNEL4);
 68c:	84 e0       	ldi	r24, 0x04	; 4
 68e:	0e 94 41 00 	call	0x82	; 0x82 <ADC_vidInit>
	u8 tempVal;
    while (1) 
    {
		LCD_vidSendCmd(LCD_CLEAR_SCREEN);
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_vidSendCmd>
		tempVal = LM35_u8LM35Read();
 698:	0e 94 2d 03 	call	0x65a	; 0x65a <LM35_u8LM35Read>
 69c:	c8 2f       	mov	r28, r24
		LCD_vidSendNumber(tempVal);
 69e:	68 2f       	mov	r22, r24
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <LCD_vidSendNumber>
		LCD_vidSendString(" C");
 6aa:	87 e6       	ldi	r24, 0x67	; 103
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_vidSendString>
		LCD_vidSendChar((char)223);
 6b2:	8f ed       	ldi	r24, 0xDF	; 223
 6b4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_vidSendChar>
		while(LM35_u8LM35Read()==tempVal);
 6b8:	0e 94 2d 03 	call	0x65a	; 0x65a <LM35_u8LM35Read>
 6bc:	c8 17       	cp	r28, r24
 6be:	e1 f3       	breq	.-8      	; 0x6b8 <main+0x30>
 6c0:	e8 cf       	rjmp	.-48     	; 0x692 <main+0xa>

000006c2 <__divsf3>:
 6c2:	0e 94 75 03 	call	0x6ea	; 0x6ea <__divsf3x>
 6c6:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_round>
 6ca:	0e 94 4f 04 	call	0x89e	; 0x89e <__fp_pscB>
 6ce:	58 f0       	brcs	.+22     	; 0x6e6 <__divsf3+0x24>
 6d0:	0e 94 48 04 	call	0x890	; 0x890 <__fp_pscA>
 6d4:	40 f0       	brcs	.+16     	; 0x6e6 <__divsf3+0x24>
 6d6:	29 f4       	brne	.+10     	; 0x6e2 <__divsf3+0x20>
 6d8:	5f 3f       	cpi	r21, 0xFF	; 255
 6da:	29 f0       	breq	.+10     	; 0x6e6 <__divsf3+0x24>
 6dc:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 6e0:	51 11       	cpse	r21, r1
 6e2:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>
 6e6:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_nan>

000006ea <__divsf3x>:
 6ea:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_split3>
 6ee:	68 f3       	brcs	.-38     	; 0x6ca <__divsf3+0x8>

000006f0 <__divsf3_pse>:
 6f0:	99 23       	and	r25, r25
 6f2:	b1 f3       	breq	.-20     	; 0x6e0 <__divsf3+0x1e>
 6f4:	55 23       	and	r21, r21
 6f6:	91 f3       	breq	.-28     	; 0x6dc <__divsf3+0x1a>
 6f8:	95 1b       	sub	r25, r21
 6fa:	55 0b       	sbc	r21, r21
 6fc:	bb 27       	eor	r27, r27
 6fe:	aa 27       	eor	r26, r26
 700:	62 17       	cp	r22, r18
 702:	73 07       	cpc	r23, r19
 704:	84 07       	cpc	r24, r20
 706:	38 f0       	brcs	.+14     	; 0x716 <__divsf3_pse+0x26>
 708:	9f 5f       	subi	r25, 0xFF	; 255
 70a:	5f 4f       	sbci	r21, 0xFF	; 255
 70c:	22 0f       	add	r18, r18
 70e:	33 1f       	adc	r19, r19
 710:	44 1f       	adc	r20, r20
 712:	aa 1f       	adc	r26, r26
 714:	a9 f3       	breq	.-22     	; 0x700 <__divsf3_pse+0x10>
 716:	35 d0       	rcall	.+106    	; 0x782 <__divsf3_pse+0x92>
 718:	0e 2e       	mov	r0, r30
 71a:	3a f0       	brmi	.+14     	; 0x72a <__divsf3_pse+0x3a>
 71c:	e0 e8       	ldi	r30, 0x80	; 128
 71e:	32 d0       	rcall	.+100    	; 0x784 <__divsf3_pse+0x94>
 720:	91 50       	subi	r25, 0x01	; 1
 722:	50 40       	sbci	r21, 0x00	; 0
 724:	e6 95       	lsr	r30
 726:	00 1c       	adc	r0, r0
 728:	ca f7       	brpl	.-14     	; 0x71c <__divsf3_pse+0x2c>
 72a:	2b d0       	rcall	.+86     	; 0x782 <__divsf3_pse+0x92>
 72c:	fe 2f       	mov	r31, r30
 72e:	29 d0       	rcall	.+82     	; 0x782 <__divsf3_pse+0x92>
 730:	66 0f       	add	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	bb 1f       	adc	r27, r27
 738:	26 17       	cp	r18, r22
 73a:	37 07       	cpc	r19, r23
 73c:	48 07       	cpc	r20, r24
 73e:	ab 07       	cpc	r26, r27
 740:	b0 e8       	ldi	r27, 0x80	; 128
 742:	09 f0       	breq	.+2      	; 0x746 <__divsf3_pse+0x56>
 744:	bb 0b       	sbc	r27, r27
 746:	80 2d       	mov	r24, r0
 748:	bf 01       	movw	r22, r30
 74a:	ff 27       	eor	r31, r31
 74c:	93 58       	subi	r25, 0x83	; 131
 74e:	5f 4f       	sbci	r21, 0xFF	; 255
 750:	3a f0       	brmi	.+14     	; 0x760 <__divsf3_pse+0x70>
 752:	9e 3f       	cpi	r25, 0xFE	; 254
 754:	51 05       	cpc	r21, r1
 756:	78 f0       	brcs	.+30     	; 0x776 <__divsf3_pse+0x86>
 758:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 75c:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>
 760:	5f 3f       	cpi	r21, 0xFF	; 255
 762:	e4 f3       	brlt	.-8      	; 0x75c <__divsf3_pse+0x6c>
 764:	98 3e       	cpi	r25, 0xE8	; 232
 766:	d4 f3       	brlt	.-12     	; 0x75c <__divsf3_pse+0x6c>
 768:	86 95       	lsr	r24
 76a:	77 95       	ror	r23
 76c:	67 95       	ror	r22
 76e:	b7 95       	ror	r27
 770:	f7 95       	ror	r31
 772:	9f 5f       	subi	r25, 0xFF	; 255
 774:	c9 f7       	brne	.-14     	; 0x768 <__divsf3_pse+0x78>
 776:	88 0f       	add	r24, r24
 778:	91 1d       	adc	r25, r1
 77a:	96 95       	lsr	r25
 77c:	87 95       	ror	r24
 77e:	97 f9       	bld	r25, 7
 780:	08 95       	ret
 782:	e1 e0       	ldi	r30, 0x01	; 1
 784:	66 0f       	add	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	bb 1f       	adc	r27, r27
 78c:	62 17       	cp	r22, r18
 78e:	73 07       	cpc	r23, r19
 790:	84 07       	cpc	r24, r20
 792:	ba 07       	cpc	r27, r26
 794:	20 f0       	brcs	.+8      	; 0x79e <__divsf3_pse+0xae>
 796:	62 1b       	sub	r22, r18
 798:	73 0b       	sbc	r23, r19
 79a:	84 0b       	sbc	r24, r20
 79c:	ba 0b       	sbc	r27, r26
 79e:	ee 1f       	adc	r30, r30
 7a0:	88 f7       	brcc	.-30     	; 0x784 <__divsf3_pse+0x94>
 7a2:	e0 95       	com	r30
 7a4:	08 95       	ret

000007a6 <__fixunssfsi>:
 7a6:	0e 94 6f 04 	call	0x8de	; 0x8de <__fp_splitA>
 7aa:	88 f0       	brcs	.+34     	; 0x7ce <__fixunssfsi+0x28>
 7ac:	9f 57       	subi	r25, 0x7F	; 127
 7ae:	98 f0       	brcs	.+38     	; 0x7d6 <__fixunssfsi+0x30>
 7b0:	b9 2f       	mov	r27, r25
 7b2:	99 27       	eor	r25, r25
 7b4:	b7 51       	subi	r27, 0x17	; 23
 7b6:	b0 f0       	brcs	.+44     	; 0x7e4 <__fixunssfsi+0x3e>
 7b8:	e1 f0       	breq	.+56     	; 0x7f2 <__fixunssfsi+0x4c>
 7ba:	66 0f       	add	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	1a f0       	brmi	.+6      	; 0x7ca <__fixunssfsi+0x24>
 7c4:	ba 95       	dec	r27
 7c6:	c9 f7       	brne	.-14     	; 0x7ba <__fixunssfsi+0x14>
 7c8:	14 c0       	rjmp	.+40     	; 0x7f2 <__fixunssfsi+0x4c>
 7ca:	b1 30       	cpi	r27, 0x01	; 1
 7cc:	91 f0       	breq	.+36     	; 0x7f2 <__fixunssfsi+0x4c>
 7ce:	0e 94 89 04 	call	0x912	; 0x912 <__fp_zero>
 7d2:	b1 e0       	ldi	r27, 0x01	; 1
 7d4:	08 95       	ret
 7d6:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_zero>
 7da:	67 2f       	mov	r22, r23
 7dc:	78 2f       	mov	r23, r24
 7de:	88 27       	eor	r24, r24
 7e0:	b8 5f       	subi	r27, 0xF8	; 248
 7e2:	39 f0       	breq	.+14     	; 0x7f2 <__fixunssfsi+0x4c>
 7e4:	b9 3f       	cpi	r27, 0xF9	; 249
 7e6:	cc f3       	brlt	.-14     	; 0x7da <__fixunssfsi+0x34>
 7e8:	86 95       	lsr	r24
 7ea:	77 95       	ror	r23
 7ec:	67 95       	ror	r22
 7ee:	b3 95       	inc	r27
 7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__fixunssfsi+0x42>
 7f2:	3e f4       	brtc	.+14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f4:	90 95       	com	r25
 7f6:	80 95       	com	r24
 7f8:	70 95       	com	r23
 7fa:	61 95       	neg	r22
 7fc:	7f 4f       	sbci	r23, 0xFF	; 255
 7fe:	8f 4f       	sbci	r24, 0xFF	; 255
 800:	9f 4f       	sbci	r25, 0xFF	; 255
 802:	08 95       	ret

00000804 <__floatunsisf>:
 804:	e8 94       	clt
 806:	09 c0       	rjmp	.+18     	; 0x81a <__floatsisf+0x12>

00000808 <__floatsisf>:
 808:	97 fb       	bst	r25, 7
 80a:	3e f4       	brtc	.+14     	; 0x81a <__floatsisf+0x12>
 80c:	90 95       	com	r25
 80e:	80 95       	com	r24
 810:	70 95       	com	r23
 812:	61 95       	neg	r22
 814:	7f 4f       	sbci	r23, 0xFF	; 255
 816:	8f 4f       	sbci	r24, 0xFF	; 255
 818:	9f 4f       	sbci	r25, 0xFF	; 255
 81a:	99 23       	and	r25, r25
 81c:	a9 f0       	breq	.+42     	; 0x848 <__floatsisf+0x40>
 81e:	f9 2f       	mov	r31, r25
 820:	96 e9       	ldi	r25, 0x96	; 150
 822:	bb 27       	eor	r27, r27
 824:	93 95       	inc	r25
 826:	f6 95       	lsr	r31
 828:	87 95       	ror	r24
 82a:	77 95       	ror	r23
 82c:	67 95       	ror	r22
 82e:	b7 95       	ror	r27
 830:	f1 11       	cpse	r31, r1
 832:	f8 cf       	rjmp	.-16     	; 0x824 <__floatsisf+0x1c>
 834:	fa f4       	brpl	.+62     	; 0x874 <__stack+0x15>
 836:	bb 0f       	add	r27, r27
 838:	11 f4       	brne	.+4      	; 0x83e <__floatsisf+0x36>
 83a:	60 ff       	sbrs	r22, 0
 83c:	1b c0       	rjmp	.+54     	; 0x874 <__stack+0x15>
 83e:	6f 5f       	subi	r22, 0xFF	; 255
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	8f 4f       	sbci	r24, 0xFF	; 255
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	16 c0       	rjmp	.+44     	; 0x874 <__stack+0x15>
 848:	88 23       	and	r24, r24
 84a:	11 f0       	breq	.+4      	; 0x850 <__floatsisf+0x48>
 84c:	96 e9       	ldi	r25, 0x96	; 150
 84e:	11 c0       	rjmp	.+34     	; 0x872 <__stack+0x13>
 850:	77 23       	and	r23, r23
 852:	21 f0       	breq	.+8      	; 0x85c <__floatsisf+0x54>
 854:	9e e8       	ldi	r25, 0x8E	; 142
 856:	87 2f       	mov	r24, r23
 858:	76 2f       	mov	r23, r22
 85a:	05 c0       	rjmp	.+10     	; 0x866 <__stack+0x7>
 85c:	66 23       	and	r22, r22
 85e:	71 f0       	breq	.+28     	; 0x87c <__stack+0x1d>
 860:	96 e8       	ldi	r25, 0x86	; 134
 862:	86 2f       	mov	r24, r22
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	2a f0       	brmi	.+10     	; 0x874 <__stack+0x15>
 86a:	9a 95       	dec	r25
 86c:	66 0f       	add	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	da f7       	brpl	.-10     	; 0x86a <__stack+0xb>
 874:	88 0f       	add	r24, r24
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret

0000087e <__fp_inf>:
 87e:	97 f9       	bld	r25, 7
 880:	9f 67       	ori	r25, 0x7F	; 127
 882:	80 e8       	ldi	r24, 0x80	; 128
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	60 e0       	ldi	r22, 0x00	; 0
 888:	08 95       	ret

0000088a <__fp_nan>:
 88a:	9f ef       	ldi	r25, 0xFF	; 255
 88c:	80 ec       	ldi	r24, 0xC0	; 192
 88e:	08 95       	ret

00000890 <__fp_pscA>:
 890:	00 24       	eor	r0, r0
 892:	0a 94       	dec	r0
 894:	16 16       	cp	r1, r22
 896:	17 06       	cpc	r1, r23
 898:	18 06       	cpc	r1, r24
 89a:	09 06       	cpc	r0, r25
 89c:	08 95       	ret

0000089e <__fp_pscB>:
 89e:	00 24       	eor	r0, r0
 8a0:	0a 94       	dec	r0
 8a2:	12 16       	cp	r1, r18
 8a4:	13 06       	cpc	r1, r19
 8a6:	14 06       	cpc	r1, r20
 8a8:	05 06       	cpc	r0, r21
 8aa:	08 95       	ret

000008ac <__fp_round>:
 8ac:	09 2e       	mov	r0, r25
 8ae:	03 94       	inc	r0
 8b0:	00 0c       	add	r0, r0
 8b2:	11 f4       	brne	.+4      	; 0x8b8 <__fp_round+0xc>
 8b4:	88 23       	and	r24, r24
 8b6:	52 f0       	brmi	.+20     	; 0x8cc <__fp_round+0x20>
 8b8:	bb 0f       	add	r27, r27
 8ba:	40 f4       	brcc	.+16     	; 0x8cc <__fp_round+0x20>
 8bc:	bf 2b       	or	r27, r31
 8be:	11 f4       	brne	.+4      	; 0x8c4 <__fp_round+0x18>
 8c0:	60 ff       	sbrs	r22, 0
 8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__fp_round+0x20>
 8c4:	6f 5f       	subi	r22, 0xFF	; 255
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ca:	9f 4f       	sbci	r25, 0xFF	; 255
 8cc:	08 95       	ret

000008ce <__fp_split3>:
 8ce:	57 fd       	sbrc	r21, 7
 8d0:	90 58       	subi	r25, 0x80	; 128
 8d2:	44 0f       	add	r20, r20
 8d4:	55 1f       	adc	r21, r21
 8d6:	59 f0       	breq	.+22     	; 0x8ee <__fp_splitA+0x10>
 8d8:	5f 3f       	cpi	r21, 0xFF	; 255
 8da:	71 f0       	breq	.+28     	; 0x8f8 <__fp_splitA+0x1a>
 8dc:	47 95       	ror	r20

000008de <__fp_splitA>:
 8de:	88 0f       	add	r24, r24
 8e0:	97 fb       	bst	r25, 7
 8e2:	99 1f       	adc	r25, r25
 8e4:	61 f0       	breq	.+24     	; 0x8fe <__fp_splitA+0x20>
 8e6:	9f 3f       	cpi	r25, 0xFF	; 255
 8e8:	79 f0       	breq	.+30     	; 0x908 <__fp_splitA+0x2a>
 8ea:	87 95       	ror	r24
 8ec:	08 95       	ret
 8ee:	12 16       	cp	r1, r18
 8f0:	13 06       	cpc	r1, r19
 8f2:	14 06       	cpc	r1, r20
 8f4:	55 1f       	adc	r21, r21
 8f6:	f2 cf       	rjmp	.-28     	; 0x8dc <__fp_split3+0xe>
 8f8:	46 95       	lsr	r20
 8fa:	f1 df       	rcall	.-30     	; 0x8de <__fp_splitA>
 8fc:	08 c0       	rjmp	.+16     	; 0x90e <__fp_splitA+0x30>
 8fe:	16 16       	cp	r1, r22
 900:	17 06       	cpc	r1, r23
 902:	18 06       	cpc	r1, r24
 904:	99 1f       	adc	r25, r25
 906:	f1 cf       	rjmp	.-30     	; 0x8ea <__fp_splitA+0xc>
 908:	86 95       	lsr	r24
 90a:	71 05       	cpc	r23, r1
 90c:	61 05       	cpc	r22, r1
 90e:	08 94       	sec
 910:	08 95       	ret

00000912 <__fp_zero>:
 912:	e8 94       	clt

00000914 <__fp_szero>:
 914:	bb 27       	eor	r27, r27
 916:	66 27       	eor	r22, r22
 918:	77 27       	eor	r23, r23
 91a:	cb 01       	movw	r24, r22
 91c:	97 f9       	bld	r25, 7
 91e:	08 95       	ret

00000920 <__mulsf3>:
 920:	0e 94 a3 04 	call	0x946	; 0x946 <__mulsf3x>
 924:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_round>
 928:	0e 94 48 04 	call	0x890	; 0x890 <__fp_pscA>
 92c:	38 f0       	brcs	.+14     	; 0x93c <__mulsf3+0x1c>
 92e:	0e 94 4f 04 	call	0x89e	; 0x89e <__fp_pscB>
 932:	20 f0       	brcs	.+8      	; 0x93c <__mulsf3+0x1c>
 934:	95 23       	and	r25, r21
 936:	11 f0       	breq	.+4      	; 0x93c <__mulsf3+0x1c>
 938:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 93c:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_nan>
 940:	11 24       	eor	r1, r1
 942:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>

00000946 <__mulsf3x>:
 946:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_split3>
 94a:	70 f3       	brcs	.-36     	; 0x928 <__mulsf3+0x8>

0000094c <__mulsf3_pse>:
 94c:	95 9f       	mul	r25, r21
 94e:	c1 f3       	breq	.-16     	; 0x940 <__mulsf3+0x20>
 950:	95 0f       	add	r25, r21
 952:	50 e0       	ldi	r21, 0x00	; 0
 954:	55 1f       	adc	r21, r21
 956:	62 9f       	mul	r22, r18
 958:	f0 01       	movw	r30, r0
 95a:	72 9f       	mul	r23, r18
 95c:	bb 27       	eor	r27, r27
 95e:	f0 0d       	add	r31, r0
 960:	b1 1d       	adc	r27, r1
 962:	63 9f       	mul	r22, r19
 964:	aa 27       	eor	r26, r26
 966:	f0 0d       	add	r31, r0
 968:	b1 1d       	adc	r27, r1
 96a:	aa 1f       	adc	r26, r26
 96c:	64 9f       	mul	r22, r20
 96e:	66 27       	eor	r22, r22
 970:	b0 0d       	add	r27, r0
 972:	a1 1d       	adc	r26, r1
 974:	66 1f       	adc	r22, r22
 976:	82 9f       	mul	r24, r18
 978:	22 27       	eor	r18, r18
 97a:	b0 0d       	add	r27, r0
 97c:	a1 1d       	adc	r26, r1
 97e:	62 1f       	adc	r22, r18
 980:	73 9f       	mul	r23, r19
 982:	b0 0d       	add	r27, r0
 984:	a1 1d       	adc	r26, r1
 986:	62 1f       	adc	r22, r18
 988:	83 9f       	mul	r24, r19
 98a:	a0 0d       	add	r26, r0
 98c:	61 1d       	adc	r22, r1
 98e:	22 1f       	adc	r18, r18
 990:	74 9f       	mul	r23, r20
 992:	33 27       	eor	r19, r19
 994:	a0 0d       	add	r26, r0
 996:	61 1d       	adc	r22, r1
 998:	23 1f       	adc	r18, r19
 99a:	84 9f       	mul	r24, r20
 99c:	60 0d       	add	r22, r0
 99e:	21 1d       	adc	r18, r1
 9a0:	82 2f       	mov	r24, r18
 9a2:	76 2f       	mov	r23, r22
 9a4:	6a 2f       	mov	r22, r26
 9a6:	11 24       	eor	r1, r1
 9a8:	9f 57       	subi	r25, 0x7F	; 127
 9aa:	50 40       	sbci	r21, 0x00	; 0
 9ac:	9a f0       	brmi	.+38     	; 0x9d4 <__mulsf3_pse+0x88>
 9ae:	f1 f0       	breq	.+60     	; 0x9ec <__mulsf3_pse+0xa0>
 9b0:	88 23       	and	r24, r24
 9b2:	4a f0       	brmi	.+18     	; 0x9c6 <__mulsf3_pse+0x7a>
 9b4:	ee 0f       	add	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	bb 1f       	adc	r27, r27
 9ba:	66 1f       	adc	r22, r22
 9bc:	77 1f       	adc	r23, r23
 9be:	88 1f       	adc	r24, r24
 9c0:	91 50       	subi	r25, 0x01	; 1
 9c2:	50 40       	sbci	r21, 0x00	; 0
 9c4:	a9 f7       	brne	.-22     	; 0x9b0 <__mulsf3_pse+0x64>
 9c6:	9e 3f       	cpi	r25, 0xFE	; 254
 9c8:	51 05       	cpc	r21, r1
 9ca:	80 f0       	brcs	.+32     	; 0x9ec <__mulsf3_pse+0xa0>
 9cc:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 9d0:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>
 9d4:	5f 3f       	cpi	r21, 0xFF	; 255
 9d6:	e4 f3       	brlt	.-8      	; 0x9d0 <__mulsf3_pse+0x84>
 9d8:	98 3e       	cpi	r25, 0xE8	; 232
 9da:	d4 f3       	brlt	.-12     	; 0x9d0 <__mulsf3_pse+0x84>
 9dc:	86 95       	lsr	r24
 9de:	77 95       	ror	r23
 9e0:	67 95       	ror	r22
 9e2:	b7 95       	ror	r27
 9e4:	f7 95       	ror	r31
 9e6:	e7 95       	ror	r30
 9e8:	9f 5f       	subi	r25, 0xFF	; 255
 9ea:	c1 f7       	brne	.-16     	; 0x9dc <__mulsf3_pse+0x90>
 9ec:	fe 2b       	or	r31, r30
 9ee:	88 0f       	add	r24, r24
 9f0:	91 1d       	adc	r25, r1
 9f2:	96 95       	lsr	r25
 9f4:	87 95       	ror	r24
 9f6:	97 f9       	bld	r25, 7
 9f8:	08 95       	ret

000009fa <sprintf>:
 9fa:	ae e0       	ldi	r26, 0x0E	; 14
 9fc:	b0 e0       	ldi	r27, 0x00	; 0
 9fe:	e3 e0       	ldi	r30, 0x03	; 3
 a00:	f5 e0       	ldi	r31, 0x05	; 5
 a02:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__prologue_saves__+0x1c>
 a06:	0d 89       	ldd	r16, Y+21	; 0x15
 a08:	1e 89       	ldd	r17, Y+22	; 0x16
 a0a:	86 e0       	ldi	r24, 0x06	; 6
 a0c:	8c 83       	std	Y+4, r24	; 0x04
 a0e:	1a 83       	std	Y+2, r17	; 0x02
 a10:	09 83       	std	Y+1, r16	; 0x01
 a12:	8f ef       	ldi	r24, 0xFF	; 255
 a14:	9f e7       	ldi	r25, 0x7F	; 127
 a16:	9e 83       	std	Y+6, r25	; 0x06
 a18:	8d 83       	std	Y+5, r24	; 0x05
 a1a:	ae 01       	movw	r20, r28
 a1c:	47 5e       	subi	r20, 0xE7	; 231
 a1e:	5f 4f       	sbci	r21, 0xFF	; 255
 a20:	6f 89       	ldd	r22, Y+23	; 0x17
 a22:	78 8d       	ldd	r23, Y+24	; 0x18
 a24:	ce 01       	movw	r24, r28
 a26:	01 96       	adiw	r24, 0x01	; 1
 a28:	0e 94 1f 05 	call	0xa3e	; 0xa3e <vfprintf>
 a2c:	ef 81       	ldd	r30, Y+7	; 0x07
 a2e:	f8 85       	ldd	r31, Y+8	; 0x08
 a30:	e0 0f       	add	r30, r16
 a32:	f1 1f       	adc	r31, r17
 a34:	10 82       	st	Z, r1
 a36:	2e 96       	adiw	r28, 0x0e	; 14
 a38:	e4 e0       	ldi	r30, 0x04	; 4
 a3a:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__epilogue_restores__+0x1c>

00000a3e <vfprintf>:
 a3e:	ab e0       	ldi	r26, 0x0B	; 11
 a40:	b0 e0       	ldi	r27, 0x00	; 0
 a42:	e5 e2       	ldi	r30, 0x25	; 37
 a44:	f5 e0       	ldi	r31, 0x05	; 5
 a46:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__prologue_saves__>
 a4a:	6c 01       	movw	r12, r24
 a4c:	7b 01       	movw	r14, r22
 a4e:	8a 01       	movw	r16, r20
 a50:	fc 01       	movw	r30, r24
 a52:	17 82       	std	Z+7, r1	; 0x07
 a54:	16 82       	std	Z+6, r1	; 0x06
 a56:	83 81       	ldd	r24, Z+3	; 0x03
 a58:	81 ff       	sbrs	r24, 1
 a5a:	cc c1       	rjmp	.+920    	; 0xdf4 <vfprintf+0x3b6>
 a5c:	ce 01       	movw	r24, r28
 a5e:	01 96       	adiw	r24, 0x01	; 1
 a60:	3c 01       	movw	r6, r24
 a62:	f6 01       	movw	r30, r12
 a64:	93 81       	ldd	r25, Z+3	; 0x03
 a66:	f7 01       	movw	r30, r14
 a68:	93 fd       	sbrc	r25, 3
 a6a:	85 91       	lpm	r24, Z+
 a6c:	93 ff       	sbrs	r25, 3
 a6e:	81 91       	ld	r24, Z+
 a70:	7f 01       	movw	r14, r30
 a72:	88 23       	and	r24, r24
 a74:	09 f4       	brne	.+2      	; 0xa78 <vfprintf+0x3a>
 a76:	ba c1       	rjmp	.+884    	; 0xdec <vfprintf+0x3ae>
 a78:	85 32       	cpi	r24, 0x25	; 37
 a7a:	39 f4       	brne	.+14     	; 0xa8a <vfprintf+0x4c>
 a7c:	93 fd       	sbrc	r25, 3
 a7e:	85 91       	lpm	r24, Z+
 a80:	93 ff       	sbrs	r25, 3
 a82:	81 91       	ld	r24, Z+
 a84:	7f 01       	movw	r14, r30
 a86:	85 32       	cpi	r24, 0x25	; 37
 a88:	29 f4       	brne	.+10     	; 0xa94 <vfprintf+0x56>
 a8a:	b6 01       	movw	r22, r12
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 a92:	e7 cf       	rjmp	.-50     	; 0xa62 <vfprintf+0x24>
 a94:	91 2c       	mov	r9, r1
 a96:	21 2c       	mov	r2, r1
 a98:	31 2c       	mov	r3, r1
 a9a:	ff e1       	ldi	r31, 0x1F	; 31
 a9c:	f3 15       	cp	r31, r3
 a9e:	d8 f0       	brcs	.+54     	; 0xad6 <vfprintf+0x98>
 aa0:	8b 32       	cpi	r24, 0x2B	; 43
 aa2:	79 f0       	breq	.+30     	; 0xac2 <vfprintf+0x84>
 aa4:	38 f4       	brcc	.+14     	; 0xab4 <vfprintf+0x76>
 aa6:	80 32       	cpi	r24, 0x20	; 32
 aa8:	79 f0       	breq	.+30     	; 0xac8 <vfprintf+0x8a>
 aaa:	83 32       	cpi	r24, 0x23	; 35
 aac:	a1 f4       	brne	.+40     	; 0xad6 <vfprintf+0x98>
 aae:	23 2d       	mov	r18, r3
 ab0:	20 61       	ori	r18, 0x10	; 16
 ab2:	1d c0       	rjmp	.+58     	; 0xaee <vfprintf+0xb0>
 ab4:	8d 32       	cpi	r24, 0x2D	; 45
 ab6:	61 f0       	breq	.+24     	; 0xad0 <vfprintf+0x92>
 ab8:	80 33       	cpi	r24, 0x30	; 48
 aba:	69 f4       	brne	.+26     	; 0xad6 <vfprintf+0x98>
 abc:	23 2d       	mov	r18, r3
 abe:	21 60       	ori	r18, 0x01	; 1
 ac0:	16 c0       	rjmp	.+44     	; 0xaee <vfprintf+0xb0>
 ac2:	83 2d       	mov	r24, r3
 ac4:	82 60       	ori	r24, 0x02	; 2
 ac6:	38 2e       	mov	r3, r24
 ac8:	e3 2d       	mov	r30, r3
 aca:	e4 60       	ori	r30, 0x04	; 4
 acc:	3e 2e       	mov	r3, r30
 ace:	2a c0       	rjmp	.+84     	; 0xb24 <vfprintf+0xe6>
 ad0:	f3 2d       	mov	r31, r3
 ad2:	f8 60       	ori	r31, 0x08	; 8
 ad4:	1d c0       	rjmp	.+58     	; 0xb10 <vfprintf+0xd2>
 ad6:	37 fc       	sbrc	r3, 7
 ad8:	2d c0       	rjmp	.+90     	; 0xb34 <vfprintf+0xf6>
 ada:	20 ed       	ldi	r18, 0xD0	; 208
 adc:	28 0f       	add	r18, r24
 ade:	2a 30       	cpi	r18, 0x0A	; 10
 ae0:	40 f0       	brcs	.+16     	; 0xaf2 <vfprintf+0xb4>
 ae2:	8e 32       	cpi	r24, 0x2E	; 46
 ae4:	b9 f4       	brne	.+46     	; 0xb14 <vfprintf+0xd6>
 ae6:	36 fc       	sbrc	r3, 6
 ae8:	81 c1       	rjmp	.+770    	; 0xdec <vfprintf+0x3ae>
 aea:	23 2d       	mov	r18, r3
 aec:	20 64       	ori	r18, 0x40	; 64
 aee:	32 2e       	mov	r3, r18
 af0:	19 c0       	rjmp	.+50     	; 0xb24 <vfprintf+0xe6>
 af2:	36 fe       	sbrs	r3, 6
 af4:	06 c0       	rjmp	.+12     	; 0xb02 <vfprintf+0xc4>
 af6:	8a e0       	ldi	r24, 0x0A	; 10
 af8:	98 9e       	mul	r9, r24
 afa:	20 0d       	add	r18, r0
 afc:	11 24       	eor	r1, r1
 afe:	92 2e       	mov	r9, r18
 b00:	11 c0       	rjmp	.+34     	; 0xb24 <vfprintf+0xe6>
 b02:	ea e0       	ldi	r30, 0x0A	; 10
 b04:	2e 9e       	mul	r2, r30
 b06:	20 0d       	add	r18, r0
 b08:	11 24       	eor	r1, r1
 b0a:	22 2e       	mov	r2, r18
 b0c:	f3 2d       	mov	r31, r3
 b0e:	f0 62       	ori	r31, 0x20	; 32
 b10:	3f 2e       	mov	r3, r31
 b12:	08 c0       	rjmp	.+16     	; 0xb24 <vfprintf+0xe6>
 b14:	8c 36       	cpi	r24, 0x6C	; 108
 b16:	21 f4       	brne	.+8      	; 0xb20 <vfprintf+0xe2>
 b18:	83 2d       	mov	r24, r3
 b1a:	80 68       	ori	r24, 0x80	; 128
 b1c:	38 2e       	mov	r3, r24
 b1e:	02 c0       	rjmp	.+4      	; 0xb24 <vfprintf+0xe6>
 b20:	88 36       	cpi	r24, 0x68	; 104
 b22:	41 f4       	brne	.+16     	; 0xb34 <vfprintf+0xf6>
 b24:	f7 01       	movw	r30, r14
 b26:	93 fd       	sbrc	r25, 3
 b28:	85 91       	lpm	r24, Z+
 b2a:	93 ff       	sbrs	r25, 3
 b2c:	81 91       	ld	r24, Z+
 b2e:	7f 01       	movw	r14, r30
 b30:	81 11       	cpse	r24, r1
 b32:	b3 cf       	rjmp	.-154    	; 0xa9a <vfprintf+0x5c>
 b34:	98 2f       	mov	r25, r24
 b36:	9f 7d       	andi	r25, 0xDF	; 223
 b38:	95 54       	subi	r25, 0x45	; 69
 b3a:	93 30       	cpi	r25, 0x03	; 3
 b3c:	28 f4       	brcc	.+10     	; 0xb48 <vfprintf+0x10a>
 b3e:	0c 5f       	subi	r16, 0xFC	; 252
 b40:	1f 4f       	sbci	r17, 0xFF	; 255
 b42:	9f e3       	ldi	r25, 0x3F	; 63
 b44:	99 83       	std	Y+1, r25	; 0x01
 b46:	0d c0       	rjmp	.+26     	; 0xb62 <vfprintf+0x124>
 b48:	83 36       	cpi	r24, 0x63	; 99
 b4a:	31 f0       	breq	.+12     	; 0xb58 <vfprintf+0x11a>
 b4c:	83 37       	cpi	r24, 0x73	; 115
 b4e:	71 f0       	breq	.+28     	; 0xb6c <vfprintf+0x12e>
 b50:	83 35       	cpi	r24, 0x53	; 83
 b52:	09 f0       	breq	.+2      	; 0xb56 <vfprintf+0x118>
 b54:	59 c0       	rjmp	.+178    	; 0xc08 <vfprintf+0x1ca>
 b56:	21 c0       	rjmp	.+66     	; 0xb9a <vfprintf+0x15c>
 b58:	f8 01       	movw	r30, r16
 b5a:	80 81       	ld	r24, Z
 b5c:	89 83       	std	Y+1, r24	; 0x01
 b5e:	0e 5f       	subi	r16, 0xFE	; 254
 b60:	1f 4f       	sbci	r17, 0xFF	; 255
 b62:	88 24       	eor	r8, r8
 b64:	83 94       	inc	r8
 b66:	91 2c       	mov	r9, r1
 b68:	53 01       	movw	r10, r6
 b6a:	13 c0       	rjmp	.+38     	; 0xb92 <vfprintf+0x154>
 b6c:	28 01       	movw	r4, r16
 b6e:	f2 e0       	ldi	r31, 0x02	; 2
 b70:	4f 0e       	add	r4, r31
 b72:	51 1c       	adc	r5, r1
 b74:	f8 01       	movw	r30, r16
 b76:	a0 80       	ld	r10, Z
 b78:	b1 80       	ldd	r11, Z+1	; 0x01
 b7a:	36 fe       	sbrs	r3, 6
 b7c:	03 c0       	rjmp	.+6      	; 0xb84 <vfprintf+0x146>
 b7e:	69 2d       	mov	r22, r9
 b80:	70 e0       	ldi	r23, 0x00	; 0
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <vfprintf+0x14a>
 b84:	6f ef       	ldi	r22, 0xFF	; 255
 b86:	7f ef       	ldi	r23, 0xFF	; 255
 b88:	c5 01       	movw	r24, r10
 b8a:	0e 94 0b 07 	call	0xe16	; 0xe16 <strnlen>
 b8e:	4c 01       	movw	r8, r24
 b90:	82 01       	movw	r16, r4
 b92:	f3 2d       	mov	r31, r3
 b94:	ff 77       	andi	r31, 0x7F	; 127
 b96:	3f 2e       	mov	r3, r31
 b98:	16 c0       	rjmp	.+44     	; 0xbc6 <vfprintf+0x188>
 b9a:	28 01       	movw	r4, r16
 b9c:	22 e0       	ldi	r18, 0x02	; 2
 b9e:	42 0e       	add	r4, r18
 ba0:	51 1c       	adc	r5, r1
 ba2:	f8 01       	movw	r30, r16
 ba4:	a0 80       	ld	r10, Z
 ba6:	b1 80       	ldd	r11, Z+1	; 0x01
 ba8:	36 fe       	sbrs	r3, 6
 baa:	03 c0       	rjmp	.+6      	; 0xbb2 <vfprintf+0x174>
 bac:	69 2d       	mov	r22, r9
 bae:	70 e0       	ldi	r23, 0x00	; 0
 bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <vfprintf+0x178>
 bb2:	6f ef       	ldi	r22, 0xFF	; 255
 bb4:	7f ef       	ldi	r23, 0xFF	; 255
 bb6:	c5 01       	movw	r24, r10
 bb8:	0e 94 00 07 	call	0xe00	; 0xe00 <strnlen_P>
 bbc:	4c 01       	movw	r8, r24
 bbe:	f3 2d       	mov	r31, r3
 bc0:	f0 68       	ori	r31, 0x80	; 128
 bc2:	3f 2e       	mov	r3, r31
 bc4:	82 01       	movw	r16, r4
 bc6:	33 fc       	sbrc	r3, 3
 bc8:	1b c0       	rjmp	.+54     	; 0xc00 <vfprintf+0x1c2>
 bca:	82 2d       	mov	r24, r2
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	88 16       	cp	r8, r24
 bd0:	99 06       	cpc	r9, r25
 bd2:	b0 f4       	brcc	.+44     	; 0xc00 <vfprintf+0x1c2>
 bd4:	b6 01       	movw	r22, r12
 bd6:	80 e2       	ldi	r24, 0x20	; 32
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 bde:	2a 94       	dec	r2
 be0:	f4 cf       	rjmp	.-24     	; 0xbca <vfprintf+0x18c>
 be2:	f5 01       	movw	r30, r10
 be4:	37 fc       	sbrc	r3, 7
 be6:	85 91       	lpm	r24, Z+
 be8:	37 fe       	sbrs	r3, 7
 bea:	81 91       	ld	r24, Z+
 bec:	5f 01       	movw	r10, r30
 bee:	b6 01       	movw	r22, r12
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 bf6:	21 10       	cpse	r2, r1
 bf8:	2a 94       	dec	r2
 bfa:	21 e0       	ldi	r18, 0x01	; 1
 bfc:	82 1a       	sub	r8, r18
 bfe:	91 08       	sbc	r9, r1
 c00:	81 14       	cp	r8, r1
 c02:	91 04       	cpc	r9, r1
 c04:	71 f7       	brne	.-36     	; 0xbe2 <vfprintf+0x1a4>
 c06:	e8 c0       	rjmp	.+464    	; 0xdd8 <vfprintf+0x39a>
 c08:	84 36       	cpi	r24, 0x64	; 100
 c0a:	11 f0       	breq	.+4      	; 0xc10 <vfprintf+0x1d2>
 c0c:	89 36       	cpi	r24, 0x69	; 105
 c0e:	41 f5       	brne	.+80     	; 0xc60 <vfprintf+0x222>
 c10:	f8 01       	movw	r30, r16
 c12:	37 fe       	sbrs	r3, 7
 c14:	07 c0       	rjmp	.+14     	; 0xc24 <vfprintf+0x1e6>
 c16:	60 81       	ld	r22, Z
 c18:	71 81       	ldd	r23, Z+1	; 0x01
 c1a:	82 81       	ldd	r24, Z+2	; 0x02
 c1c:	93 81       	ldd	r25, Z+3	; 0x03
 c1e:	0c 5f       	subi	r16, 0xFC	; 252
 c20:	1f 4f       	sbci	r17, 0xFF	; 255
 c22:	08 c0       	rjmp	.+16     	; 0xc34 <vfprintf+0x1f6>
 c24:	60 81       	ld	r22, Z
 c26:	71 81       	ldd	r23, Z+1	; 0x01
 c28:	07 2e       	mov	r0, r23
 c2a:	00 0c       	add	r0, r0
 c2c:	88 0b       	sbc	r24, r24
 c2e:	99 0b       	sbc	r25, r25
 c30:	0e 5f       	subi	r16, 0xFE	; 254
 c32:	1f 4f       	sbci	r17, 0xFF	; 255
 c34:	f3 2d       	mov	r31, r3
 c36:	ff 76       	andi	r31, 0x6F	; 111
 c38:	3f 2e       	mov	r3, r31
 c3a:	97 ff       	sbrs	r25, 7
 c3c:	09 c0       	rjmp	.+18     	; 0xc50 <vfprintf+0x212>
 c3e:	90 95       	com	r25
 c40:	80 95       	com	r24
 c42:	70 95       	com	r23
 c44:	61 95       	neg	r22
 c46:	7f 4f       	sbci	r23, 0xFF	; 255
 c48:	8f 4f       	sbci	r24, 0xFF	; 255
 c4a:	9f 4f       	sbci	r25, 0xFF	; 255
 c4c:	f0 68       	ori	r31, 0x80	; 128
 c4e:	3f 2e       	mov	r3, r31
 c50:	2a e0       	ldi	r18, 0x0A	; 10
 c52:	30 e0       	ldi	r19, 0x00	; 0
 c54:	a3 01       	movw	r20, r6
 c56:	0e 94 52 07 	call	0xea4	; 0xea4 <__ultoa_invert>
 c5a:	88 2e       	mov	r8, r24
 c5c:	86 18       	sub	r8, r6
 c5e:	45 c0       	rjmp	.+138    	; 0xcea <vfprintf+0x2ac>
 c60:	85 37       	cpi	r24, 0x75	; 117
 c62:	31 f4       	brne	.+12     	; 0xc70 <vfprintf+0x232>
 c64:	23 2d       	mov	r18, r3
 c66:	2f 7e       	andi	r18, 0xEF	; 239
 c68:	b2 2e       	mov	r11, r18
 c6a:	2a e0       	ldi	r18, 0x0A	; 10
 c6c:	30 e0       	ldi	r19, 0x00	; 0
 c6e:	25 c0       	rjmp	.+74     	; 0xcba <vfprintf+0x27c>
 c70:	93 2d       	mov	r25, r3
 c72:	99 7f       	andi	r25, 0xF9	; 249
 c74:	b9 2e       	mov	r11, r25
 c76:	8f 36       	cpi	r24, 0x6F	; 111
 c78:	c1 f0       	breq	.+48     	; 0xcaa <vfprintf+0x26c>
 c7a:	18 f4       	brcc	.+6      	; 0xc82 <vfprintf+0x244>
 c7c:	88 35       	cpi	r24, 0x58	; 88
 c7e:	79 f0       	breq	.+30     	; 0xc9e <vfprintf+0x260>
 c80:	b5 c0       	rjmp	.+362    	; 0xdec <vfprintf+0x3ae>
 c82:	80 37       	cpi	r24, 0x70	; 112
 c84:	19 f0       	breq	.+6      	; 0xc8c <vfprintf+0x24e>
 c86:	88 37       	cpi	r24, 0x78	; 120
 c88:	21 f0       	breq	.+8      	; 0xc92 <vfprintf+0x254>
 c8a:	b0 c0       	rjmp	.+352    	; 0xdec <vfprintf+0x3ae>
 c8c:	e9 2f       	mov	r30, r25
 c8e:	e0 61       	ori	r30, 0x10	; 16
 c90:	be 2e       	mov	r11, r30
 c92:	b4 fe       	sbrs	r11, 4
 c94:	0d c0       	rjmp	.+26     	; 0xcb0 <vfprintf+0x272>
 c96:	fb 2d       	mov	r31, r11
 c98:	f4 60       	ori	r31, 0x04	; 4
 c9a:	bf 2e       	mov	r11, r31
 c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <vfprintf+0x272>
 c9e:	34 fe       	sbrs	r3, 4
 ca0:	0a c0       	rjmp	.+20     	; 0xcb6 <vfprintf+0x278>
 ca2:	29 2f       	mov	r18, r25
 ca4:	26 60       	ori	r18, 0x06	; 6
 ca6:	b2 2e       	mov	r11, r18
 ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <vfprintf+0x278>
 caa:	28 e0       	ldi	r18, 0x08	; 8
 cac:	30 e0       	ldi	r19, 0x00	; 0
 cae:	05 c0       	rjmp	.+10     	; 0xcba <vfprintf+0x27c>
 cb0:	20 e1       	ldi	r18, 0x10	; 16
 cb2:	30 e0       	ldi	r19, 0x00	; 0
 cb4:	02 c0       	rjmp	.+4      	; 0xcba <vfprintf+0x27c>
 cb6:	20 e1       	ldi	r18, 0x10	; 16
 cb8:	32 e0       	ldi	r19, 0x02	; 2
 cba:	f8 01       	movw	r30, r16
 cbc:	b7 fe       	sbrs	r11, 7
 cbe:	07 c0       	rjmp	.+14     	; 0xcce <vfprintf+0x290>
 cc0:	60 81       	ld	r22, Z
 cc2:	71 81       	ldd	r23, Z+1	; 0x01
 cc4:	82 81       	ldd	r24, Z+2	; 0x02
 cc6:	93 81       	ldd	r25, Z+3	; 0x03
 cc8:	0c 5f       	subi	r16, 0xFC	; 252
 cca:	1f 4f       	sbci	r17, 0xFF	; 255
 ccc:	06 c0       	rjmp	.+12     	; 0xcda <vfprintf+0x29c>
 cce:	60 81       	ld	r22, Z
 cd0:	71 81       	ldd	r23, Z+1	; 0x01
 cd2:	80 e0       	ldi	r24, 0x00	; 0
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	0e 5f       	subi	r16, 0xFE	; 254
 cd8:	1f 4f       	sbci	r17, 0xFF	; 255
 cda:	a3 01       	movw	r20, r6
 cdc:	0e 94 52 07 	call	0xea4	; 0xea4 <__ultoa_invert>
 ce0:	88 2e       	mov	r8, r24
 ce2:	86 18       	sub	r8, r6
 ce4:	fb 2d       	mov	r31, r11
 ce6:	ff 77       	andi	r31, 0x7F	; 127
 ce8:	3f 2e       	mov	r3, r31
 cea:	36 fe       	sbrs	r3, 6
 cec:	0d c0       	rjmp	.+26     	; 0xd08 <vfprintf+0x2ca>
 cee:	23 2d       	mov	r18, r3
 cf0:	2e 7f       	andi	r18, 0xFE	; 254
 cf2:	a2 2e       	mov	r10, r18
 cf4:	89 14       	cp	r8, r9
 cf6:	58 f4       	brcc	.+22     	; 0xd0e <vfprintf+0x2d0>
 cf8:	34 fe       	sbrs	r3, 4
 cfa:	0b c0       	rjmp	.+22     	; 0xd12 <vfprintf+0x2d4>
 cfc:	32 fc       	sbrc	r3, 2
 cfe:	09 c0       	rjmp	.+18     	; 0xd12 <vfprintf+0x2d4>
 d00:	83 2d       	mov	r24, r3
 d02:	8e 7e       	andi	r24, 0xEE	; 238
 d04:	a8 2e       	mov	r10, r24
 d06:	05 c0       	rjmp	.+10     	; 0xd12 <vfprintf+0x2d4>
 d08:	b8 2c       	mov	r11, r8
 d0a:	a3 2c       	mov	r10, r3
 d0c:	03 c0       	rjmp	.+6      	; 0xd14 <vfprintf+0x2d6>
 d0e:	b8 2c       	mov	r11, r8
 d10:	01 c0       	rjmp	.+2      	; 0xd14 <vfprintf+0x2d6>
 d12:	b9 2c       	mov	r11, r9
 d14:	a4 fe       	sbrs	r10, 4
 d16:	0f c0       	rjmp	.+30     	; 0xd36 <vfprintf+0x2f8>
 d18:	fe 01       	movw	r30, r28
 d1a:	e8 0d       	add	r30, r8
 d1c:	f1 1d       	adc	r31, r1
 d1e:	80 81       	ld	r24, Z
 d20:	80 33       	cpi	r24, 0x30	; 48
 d22:	21 f4       	brne	.+8      	; 0xd2c <vfprintf+0x2ee>
 d24:	9a 2d       	mov	r25, r10
 d26:	99 7e       	andi	r25, 0xE9	; 233
 d28:	a9 2e       	mov	r10, r25
 d2a:	09 c0       	rjmp	.+18     	; 0xd3e <vfprintf+0x300>
 d2c:	a2 fe       	sbrs	r10, 2
 d2e:	06 c0       	rjmp	.+12     	; 0xd3c <vfprintf+0x2fe>
 d30:	b3 94       	inc	r11
 d32:	b3 94       	inc	r11
 d34:	04 c0       	rjmp	.+8      	; 0xd3e <vfprintf+0x300>
 d36:	8a 2d       	mov	r24, r10
 d38:	86 78       	andi	r24, 0x86	; 134
 d3a:	09 f0       	breq	.+2      	; 0xd3e <vfprintf+0x300>
 d3c:	b3 94       	inc	r11
 d3e:	a3 fc       	sbrc	r10, 3
 d40:	11 c0       	rjmp	.+34     	; 0xd64 <vfprintf+0x326>
 d42:	a0 fe       	sbrs	r10, 0
 d44:	06 c0       	rjmp	.+12     	; 0xd52 <vfprintf+0x314>
 d46:	b2 14       	cp	r11, r2
 d48:	88 f4       	brcc	.+34     	; 0xd6c <vfprintf+0x32e>
 d4a:	28 0c       	add	r2, r8
 d4c:	92 2c       	mov	r9, r2
 d4e:	9b 18       	sub	r9, r11
 d50:	0e c0       	rjmp	.+28     	; 0xd6e <vfprintf+0x330>
 d52:	b2 14       	cp	r11, r2
 d54:	60 f4       	brcc	.+24     	; 0xd6e <vfprintf+0x330>
 d56:	b6 01       	movw	r22, r12
 d58:	80 e2       	ldi	r24, 0x20	; 32
 d5a:	90 e0       	ldi	r25, 0x00	; 0
 d5c:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 d60:	b3 94       	inc	r11
 d62:	f7 cf       	rjmp	.-18     	; 0xd52 <vfprintf+0x314>
 d64:	b2 14       	cp	r11, r2
 d66:	18 f4       	brcc	.+6      	; 0xd6e <vfprintf+0x330>
 d68:	2b 18       	sub	r2, r11
 d6a:	02 c0       	rjmp	.+4      	; 0xd70 <vfprintf+0x332>
 d6c:	98 2c       	mov	r9, r8
 d6e:	21 2c       	mov	r2, r1
 d70:	a4 fe       	sbrs	r10, 4
 d72:	10 c0       	rjmp	.+32     	; 0xd94 <vfprintf+0x356>
 d74:	b6 01       	movw	r22, r12
 d76:	80 e3       	ldi	r24, 0x30	; 48
 d78:	90 e0       	ldi	r25, 0x00	; 0
 d7a:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 d7e:	a2 fe       	sbrs	r10, 2
 d80:	17 c0       	rjmp	.+46     	; 0xdb0 <vfprintf+0x372>
 d82:	a1 fc       	sbrc	r10, 1
 d84:	03 c0       	rjmp	.+6      	; 0xd8c <vfprintf+0x34e>
 d86:	88 e7       	ldi	r24, 0x78	; 120
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	02 c0       	rjmp	.+4      	; 0xd90 <vfprintf+0x352>
 d8c:	88 e5       	ldi	r24, 0x58	; 88
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	b6 01       	movw	r22, r12
 d92:	0c c0       	rjmp	.+24     	; 0xdac <vfprintf+0x36e>
 d94:	8a 2d       	mov	r24, r10
 d96:	86 78       	andi	r24, 0x86	; 134
 d98:	59 f0       	breq	.+22     	; 0xdb0 <vfprintf+0x372>
 d9a:	a1 fe       	sbrs	r10, 1
 d9c:	02 c0       	rjmp	.+4      	; 0xda2 <vfprintf+0x364>
 d9e:	8b e2       	ldi	r24, 0x2B	; 43
 da0:	01 c0       	rjmp	.+2      	; 0xda4 <vfprintf+0x366>
 da2:	80 e2       	ldi	r24, 0x20	; 32
 da4:	a7 fc       	sbrc	r10, 7
 da6:	8d e2       	ldi	r24, 0x2D	; 45
 da8:	b6 01       	movw	r22, r12
 daa:	90 e0       	ldi	r25, 0x00	; 0
 dac:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 db0:	89 14       	cp	r8, r9
 db2:	38 f4       	brcc	.+14     	; 0xdc2 <vfprintf+0x384>
 db4:	b6 01       	movw	r22, r12
 db6:	80 e3       	ldi	r24, 0x30	; 48
 db8:	90 e0       	ldi	r25, 0x00	; 0
 dba:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 dbe:	9a 94       	dec	r9
 dc0:	f7 cf       	rjmp	.-18     	; 0xdb0 <vfprintf+0x372>
 dc2:	8a 94       	dec	r8
 dc4:	f3 01       	movw	r30, r6
 dc6:	e8 0d       	add	r30, r8
 dc8:	f1 1d       	adc	r31, r1
 dca:	80 81       	ld	r24, Z
 dcc:	b6 01       	movw	r22, r12
 dce:	90 e0       	ldi	r25, 0x00	; 0
 dd0:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 dd4:	81 10       	cpse	r8, r1
 dd6:	f5 cf       	rjmp	.-22     	; 0xdc2 <vfprintf+0x384>
 dd8:	22 20       	and	r2, r2
 dda:	09 f4       	brne	.+2      	; 0xdde <vfprintf+0x3a0>
 ddc:	42 ce       	rjmp	.-892    	; 0xa62 <vfprintf+0x24>
 dde:	b6 01       	movw	r22, r12
 de0:	80 e2       	ldi	r24, 0x20	; 32
 de2:	90 e0       	ldi	r25, 0x00	; 0
 de4:	0e 94 16 07 	call	0xe2c	; 0xe2c <fputc>
 de8:	2a 94       	dec	r2
 dea:	f6 cf       	rjmp	.-20     	; 0xdd8 <vfprintf+0x39a>
 dec:	f6 01       	movw	r30, r12
 dee:	86 81       	ldd	r24, Z+6	; 0x06
 df0:	97 81       	ldd	r25, Z+7	; 0x07
 df2:	02 c0       	rjmp	.+4      	; 0xdf8 <vfprintf+0x3ba>
 df4:	8f ef       	ldi	r24, 0xFF	; 255
 df6:	9f ef       	ldi	r25, 0xFF	; 255
 df8:	2b 96       	adiw	r28, 0x0b	; 11
 dfa:	e2 e1       	ldi	r30, 0x12	; 18
 dfc:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__epilogue_restores__>

00000e00 <strnlen_P>:
 e00:	fc 01       	movw	r30, r24
 e02:	05 90       	lpm	r0, Z+
 e04:	61 50       	subi	r22, 0x01	; 1
 e06:	70 40       	sbci	r23, 0x00	; 0
 e08:	01 10       	cpse	r0, r1
 e0a:	d8 f7       	brcc	.-10     	; 0xe02 <strnlen_P+0x2>
 e0c:	80 95       	com	r24
 e0e:	90 95       	com	r25
 e10:	8e 0f       	add	r24, r30
 e12:	9f 1f       	adc	r25, r31
 e14:	08 95       	ret

00000e16 <strnlen>:
 e16:	fc 01       	movw	r30, r24
 e18:	61 50       	subi	r22, 0x01	; 1
 e1a:	70 40       	sbci	r23, 0x00	; 0
 e1c:	01 90       	ld	r0, Z+
 e1e:	01 10       	cpse	r0, r1
 e20:	d8 f7       	brcc	.-10     	; 0xe18 <strnlen+0x2>
 e22:	80 95       	com	r24
 e24:	90 95       	com	r25
 e26:	8e 0f       	add	r24, r30
 e28:	9f 1f       	adc	r25, r31
 e2a:	08 95       	ret

00000e2c <fputc>:
 e2c:	0f 93       	push	r16
 e2e:	1f 93       	push	r17
 e30:	cf 93       	push	r28
 e32:	df 93       	push	r29
 e34:	fb 01       	movw	r30, r22
 e36:	23 81       	ldd	r18, Z+3	; 0x03
 e38:	21 fd       	sbrc	r18, 1
 e3a:	03 c0       	rjmp	.+6      	; 0xe42 <fputc+0x16>
 e3c:	8f ef       	ldi	r24, 0xFF	; 255
 e3e:	9f ef       	ldi	r25, 0xFF	; 255
 e40:	2c c0       	rjmp	.+88     	; 0xe9a <fputc+0x6e>
 e42:	22 ff       	sbrs	r18, 2
 e44:	16 c0       	rjmp	.+44     	; 0xe72 <fputc+0x46>
 e46:	46 81       	ldd	r20, Z+6	; 0x06
 e48:	57 81       	ldd	r21, Z+7	; 0x07
 e4a:	24 81       	ldd	r18, Z+4	; 0x04
 e4c:	35 81       	ldd	r19, Z+5	; 0x05
 e4e:	42 17       	cp	r20, r18
 e50:	53 07       	cpc	r21, r19
 e52:	44 f4       	brge	.+16     	; 0xe64 <fputc+0x38>
 e54:	a0 81       	ld	r26, Z
 e56:	b1 81       	ldd	r27, Z+1	; 0x01
 e58:	9d 01       	movw	r18, r26
 e5a:	2f 5f       	subi	r18, 0xFF	; 255
 e5c:	3f 4f       	sbci	r19, 0xFF	; 255
 e5e:	31 83       	std	Z+1, r19	; 0x01
 e60:	20 83       	st	Z, r18
 e62:	8c 93       	st	X, r24
 e64:	26 81       	ldd	r18, Z+6	; 0x06
 e66:	37 81       	ldd	r19, Z+7	; 0x07
 e68:	2f 5f       	subi	r18, 0xFF	; 255
 e6a:	3f 4f       	sbci	r19, 0xFF	; 255
 e6c:	37 83       	std	Z+7, r19	; 0x07
 e6e:	26 83       	std	Z+6, r18	; 0x06
 e70:	14 c0       	rjmp	.+40     	; 0xe9a <fputc+0x6e>
 e72:	8b 01       	movw	r16, r22
 e74:	ec 01       	movw	r28, r24
 e76:	fb 01       	movw	r30, r22
 e78:	00 84       	ldd	r0, Z+8	; 0x08
 e7a:	f1 85       	ldd	r31, Z+9	; 0x09
 e7c:	e0 2d       	mov	r30, r0
 e7e:	09 95       	icall
 e80:	89 2b       	or	r24, r25
 e82:	e1 f6       	brne	.-72     	; 0xe3c <fputc+0x10>
 e84:	d8 01       	movw	r26, r16
 e86:	16 96       	adiw	r26, 0x06	; 6
 e88:	8d 91       	ld	r24, X+
 e8a:	9c 91       	ld	r25, X
 e8c:	17 97       	sbiw	r26, 0x07	; 7
 e8e:	01 96       	adiw	r24, 0x01	; 1
 e90:	17 96       	adiw	r26, 0x07	; 7
 e92:	9c 93       	st	X, r25
 e94:	8e 93       	st	-X, r24
 e96:	16 97       	sbiw	r26, 0x06	; 6
 e98:	ce 01       	movw	r24, r28
 e9a:	df 91       	pop	r29
 e9c:	cf 91       	pop	r28
 e9e:	1f 91       	pop	r17
 ea0:	0f 91       	pop	r16
 ea2:	08 95       	ret

00000ea4 <__ultoa_invert>:
 ea4:	fa 01       	movw	r30, r20
 ea6:	aa 27       	eor	r26, r26
 ea8:	28 30       	cpi	r18, 0x08	; 8
 eaa:	51 f1       	breq	.+84     	; 0xf00 <__ultoa_invert+0x5c>
 eac:	20 31       	cpi	r18, 0x10	; 16
 eae:	81 f1       	breq	.+96     	; 0xf10 <__ultoa_invert+0x6c>
 eb0:	e8 94       	clt
 eb2:	6f 93       	push	r22
 eb4:	6e 7f       	andi	r22, 0xFE	; 254
 eb6:	6e 5f       	subi	r22, 0xFE	; 254
 eb8:	7f 4f       	sbci	r23, 0xFF	; 255
 eba:	8f 4f       	sbci	r24, 0xFF	; 255
 ebc:	9f 4f       	sbci	r25, 0xFF	; 255
 ebe:	af 4f       	sbci	r26, 0xFF	; 255
 ec0:	b1 e0       	ldi	r27, 0x01	; 1
 ec2:	3e d0       	rcall	.+124    	; 0xf40 <__ultoa_invert+0x9c>
 ec4:	b4 e0       	ldi	r27, 0x04	; 4
 ec6:	3c d0       	rcall	.+120    	; 0xf40 <__ultoa_invert+0x9c>
 ec8:	67 0f       	add	r22, r23
 eca:	78 1f       	adc	r23, r24
 ecc:	89 1f       	adc	r24, r25
 ece:	9a 1f       	adc	r25, r26
 ed0:	a1 1d       	adc	r26, r1
 ed2:	68 0f       	add	r22, r24
 ed4:	79 1f       	adc	r23, r25
 ed6:	8a 1f       	adc	r24, r26
 ed8:	91 1d       	adc	r25, r1
 eda:	a1 1d       	adc	r26, r1
 edc:	6a 0f       	add	r22, r26
 ede:	71 1d       	adc	r23, r1
 ee0:	81 1d       	adc	r24, r1
 ee2:	91 1d       	adc	r25, r1
 ee4:	a1 1d       	adc	r26, r1
 ee6:	20 d0       	rcall	.+64     	; 0xf28 <__ultoa_invert+0x84>
 ee8:	09 f4       	brne	.+2      	; 0xeec <__ultoa_invert+0x48>
 eea:	68 94       	set
 eec:	3f 91       	pop	r19
 eee:	2a e0       	ldi	r18, 0x0A	; 10
 ef0:	26 9f       	mul	r18, r22
 ef2:	11 24       	eor	r1, r1
 ef4:	30 19       	sub	r19, r0
 ef6:	30 5d       	subi	r19, 0xD0	; 208
 ef8:	31 93       	st	Z+, r19
 efa:	de f6       	brtc	.-74     	; 0xeb2 <__ultoa_invert+0xe>
 efc:	cf 01       	movw	r24, r30
 efe:	08 95       	ret
 f00:	46 2f       	mov	r20, r22
 f02:	47 70       	andi	r20, 0x07	; 7
 f04:	40 5d       	subi	r20, 0xD0	; 208
 f06:	41 93       	st	Z+, r20
 f08:	b3 e0       	ldi	r27, 0x03	; 3
 f0a:	0f d0       	rcall	.+30     	; 0xf2a <__ultoa_invert+0x86>
 f0c:	c9 f7       	brne	.-14     	; 0xf00 <__ultoa_invert+0x5c>
 f0e:	f6 cf       	rjmp	.-20     	; 0xefc <__ultoa_invert+0x58>
 f10:	46 2f       	mov	r20, r22
 f12:	4f 70       	andi	r20, 0x0F	; 15
 f14:	40 5d       	subi	r20, 0xD0	; 208
 f16:	4a 33       	cpi	r20, 0x3A	; 58
 f18:	18 f0       	brcs	.+6      	; 0xf20 <__ultoa_invert+0x7c>
 f1a:	49 5d       	subi	r20, 0xD9	; 217
 f1c:	31 fd       	sbrc	r19, 1
 f1e:	40 52       	subi	r20, 0x20	; 32
 f20:	41 93       	st	Z+, r20
 f22:	02 d0       	rcall	.+4      	; 0xf28 <__ultoa_invert+0x84>
 f24:	a9 f7       	brne	.-22     	; 0xf10 <__ultoa_invert+0x6c>
 f26:	ea cf       	rjmp	.-44     	; 0xefc <__ultoa_invert+0x58>
 f28:	b4 e0       	ldi	r27, 0x04	; 4
 f2a:	a6 95       	lsr	r26
 f2c:	97 95       	ror	r25
 f2e:	87 95       	ror	r24
 f30:	77 95       	ror	r23
 f32:	67 95       	ror	r22
 f34:	ba 95       	dec	r27
 f36:	c9 f7       	brne	.-14     	; 0xf2a <__ultoa_invert+0x86>
 f38:	00 97       	sbiw	r24, 0x00	; 0
 f3a:	61 05       	cpc	r22, r1
 f3c:	71 05       	cpc	r23, r1
 f3e:	08 95       	ret
 f40:	9b 01       	movw	r18, r22
 f42:	ac 01       	movw	r20, r24
 f44:	0a 2e       	mov	r0, r26
 f46:	06 94       	lsr	r0
 f48:	57 95       	ror	r21
 f4a:	47 95       	ror	r20
 f4c:	37 95       	ror	r19
 f4e:	27 95       	ror	r18
 f50:	ba 95       	dec	r27
 f52:	c9 f7       	brne	.-14     	; 0xf46 <__ultoa_invert+0xa2>
 f54:	62 0f       	add	r22, r18
 f56:	73 1f       	adc	r23, r19
 f58:	84 1f       	adc	r24, r20
 f5a:	95 1f       	adc	r25, r21
 f5c:	a0 1d       	adc	r26, r0
 f5e:	08 95       	ret

00000f60 <__prologue_saves__>:
 f60:	2f 92       	push	r2
 f62:	3f 92       	push	r3
 f64:	4f 92       	push	r4
 f66:	5f 92       	push	r5
 f68:	6f 92       	push	r6
 f6a:	7f 92       	push	r7
 f6c:	8f 92       	push	r8
 f6e:	9f 92       	push	r9
 f70:	af 92       	push	r10
 f72:	bf 92       	push	r11
 f74:	cf 92       	push	r12
 f76:	df 92       	push	r13
 f78:	ef 92       	push	r14
 f7a:	ff 92       	push	r15
 f7c:	0f 93       	push	r16
 f7e:	1f 93       	push	r17
 f80:	cf 93       	push	r28
 f82:	df 93       	push	r29
 f84:	cd b7       	in	r28, 0x3d	; 61
 f86:	de b7       	in	r29, 0x3e	; 62
 f88:	ca 1b       	sub	r28, r26
 f8a:	db 0b       	sbc	r29, r27
 f8c:	0f b6       	in	r0, 0x3f	; 63
 f8e:	f8 94       	cli
 f90:	de bf       	out	0x3e, r29	; 62
 f92:	0f be       	out	0x3f, r0	; 63
 f94:	cd bf       	out	0x3d, r28	; 61
 f96:	09 94       	ijmp

00000f98 <__epilogue_restores__>:
 f98:	2a 88       	ldd	r2, Y+18	; 0x12
 f9a:	39 88       	ldd	r3, Y+17	; 0x11
 f9c:	48 88       	ldd	r4, Y+16	; 0x10
 f9e:	5f 84       	ldd	r5, Y+15	; 0x0f
 fa0:	6e 84       	ldd	r6, Y+14	; 0x0e
 fa2:	7d 84       	ldd	r7, Y+13	; 0x0d
 fa4:	8c 84       	ldd	r8, Y+12	; 0x0c
 fa6:	9b 84       	ldd	r9, Y+11	; 0x0b
 fa8:	aa 84       	ldd	r10, Y+10	; 0x0a
 faa:	b9 84       	ldd	r11, Y+9	; 0x09
 fac:	c8 84       	ldd	r12, Y+8	; 0x08
 fae:	df 80       	ldd	r13, Y+7	; 0x07
 fb0:	ee 80       	ldd	r14, Y+6	; 0x06
 fb2:	fd 80       	ldd	r15, Y+5	; 0x05
 fb4:	0c 81       	ldd	r16, Y+4	; 0x04
 fb6:	1b 81       	ldd	r17, Y+3	; 0x03
 fb8:	aa 81       	ldd	r26, Y+2	; 0x02
 fba:	b9 81       	ldd	r27, Y+1	; 0x01
 fbc:	ce 0f       	add	r28, r30
 fbe:	d1 1d       	adc	r29, r1
 fc0:	0f b6       	in	r0, 0x3f	; 63
 fc2:	f8 94       	cli
 fc4:	de bf       	out	0x3e, r29	; 62
 fc6:	0f be       	out	0x3f, r0	; 63
 fc8:	cd bf       	out	0x3d, r28	; 61
 fca:	ed 01       	movw	r28, r26
 fcc:	08 95       	ret

00000fce <_exit>:
 fce:	f8 94       	cli

00000fd0 <__stop_program>:
 fd0:	ff cf       	rjmp	.-2      	; 0xfd0 <__stop_program>
